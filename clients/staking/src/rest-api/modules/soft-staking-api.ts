/**
 * Binance Staking REST API
 *
 * OpenAPI Specification for the Binance Staking REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    GetSoftStakingProductListResponse,
    GetSoftStakingRewardsHistoryResponse,
    SetSoftStakingResponse,
} from '../types';

/**
 * SoftStakingApi - axios parameter creator
 */
const SoftStakingApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get the available Soft Staking product list.
         *
         * Weight: 50
         *
         * @summary Get Soft Staking Product List (USER_DATA)
         * @param {string} [asset] WBETH or BETH, default to BETH
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getSoftStakingProductList: async (
            asset?: string,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/soft-staking/list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 50
         *
         * @summary Get Soft Staking Rewards History(USER_DATA)
         * @param {string} [asset] WBETH or BETH, default to BETH
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getSoftStakingRewardsHistory: async (
            asset?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/soft-staking/history/rewardsRecord',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Enable or disable Soft Staking.
         *
         * Weight: 50
         *
         * @summary Set Soft Staking (USER_DATA)
         * @param {boolean} softStaking true or false
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        setSoftStaking: async (softStaking: boolean, recvWindow?: number): Promise<RequestArgs> => {
            // verify required parameter 'softStaking' is not null or undefined
            assertParamExists('setSoftStaking', 'softStaking', softStaking);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (softStaking !== undefined && softStaking !== null) {
                localVarQueryParameter['softStaking'] = softStaking;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/soft-staking/set',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * SoftStakingApi - interface
 * @interface SoftStakingApi
 */
export interface SoftStakingApiInterface {
    /**
     * Get the available Soft Staking product list.
     *
     * Weight: 50
     *
     * @summary Get Soft Staking Product List (USER_DATA)
     * @param {GetSoftStakingProductListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SoftStakingApiInterface
     */
    getSoftStakingProductList(
        requestParameters?: GetSoftStakingProductListRequest
    ): Promise<RestApiResponse<GetSoftStakingProductListResponse>>;
    /**
     * * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 50
     *
     * @summary Get Soft Staking Rewards History(USER_DATA)
     * @param {GetSoftStakingRewardsHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SoftStakingApiInterface
     */
    getSoftStakingRewardsHistory(
        requestParameters?: GetSoftStakingRewardsHistoryRequest
    ): Promise<RestApiResponse<GetSoftStakingRewardsHistoryResponse>>;
    /**
     * Enable or disable Soft Staking.
     *
     * Weight: 50
     *
     * @summary Set Soft Staking (USER_DATA)
     * @param {SetSoftStakingRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SoftStakingApiInterface
     */
    setSoftStaking(
        requestParameters: SetSoftStakingRequest
    ): Promise<RestApiResponse<SetSoftStakingResponse>>;
}

/**
 * Request parameters for getSoftStakingProductList operation in SoftStakingApi.
 * @interface GetSoftStakingProductListRequest
 */
export interface GetSoftStakingProductListRequest {
    /**
     * WBETH or BETH, default to BETH
     * @type {string}
     * @memberof SoftStakingApiGetSoftStakingProductList
     */
    readonly asset?: string;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof SoftStakingApiGetSoftStakingProductList
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof SoftStakingApiGetSoftStakingProductList
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof SoftStakingApiGetSoftStakingProductList
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getSoftStakingRewardsHistory operation in SoftStakingApi.
 * @interface GetSoftStakingRewardsHistoryRequest
 */
export interface GetSoftStakingRewardsHistoryRequest {
    /**
     * WBETH or BETH, default to BETH
     * @type {string}
     * @memberof SoftStakingApiGetSoftStakingRewardsHistory
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof SoftStakingApiGetSoftStakingRewardsHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof SoftStakingApiGetSoftStakingRewardsHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof SoftStakingApiGetSoftStakingRewardsHistory
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof SoftStakingApiGetSoftStakingRewardsHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof SoftStakingApiGetSoftStakingRewardsHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for setSoftStaking operation in SoftStakingApi.
 * @interface SetSoftStakingRequest
 */
export interface SetSoftStakingRequest {
    /**
     * true or false
     * @type {boolean}
     * @memberof SoftStakingApiSetSoftStaking
     */
    readonly softStaking: boolean;

    /**
     *
     * @type {number}
     * @memberof SoftStakingApiSetSoftStaking
     */
    readonly recvWindow?: number;
}

/**
 * SoftStakingApi - object-oriented interface
 * @class SoftStakingApi
 */
export class SoftStakingApi implements SoftStakingApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = SoftStakingApiAxiosParamCreator(configuration);
    }

    /**
     * Get the available Soft Staking product list.
     *
     * Weight: 50
     *
     * @summary Get Soft Staking Product List (USER_DATA)
     * @param {GetSoftStakingProductListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSoftStakingProductListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SoftStakingApi
     * @see {@link https://developers.binance.com/docs/staking/soft-staking/ Binance API Documentation}
     */
    public async getSoftStakingProductList(
        requestParameters: GetSoftStakingProductListRequest = {}
    ): Promise<RestApiResponse<GetSoftStakingProductListResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getSoftStakingProductList(
            requestParameters?.asset,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetSoftStakingProductListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 50
     *
     * @summary Get Soft Staking Rewards History(USER_DATA)
     * @param {GetSoftStakingRewardsHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSoftStakingRewardsHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SoftStakingApi
     * @see {@link https://developers.binance.com/docs/staking/soft-staking/Get-Soft-Staking-Rewards-History Binance API Documentation}
     */
    public async getSoftStakingRewardsHistory(
        requestParameters: GetSoftStakingRewardsHistoryRequest = {}
    ): Promise<RestApiResponse<GetSoftStakingRewardsHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getSoftStakingRewardsHistory(
            requestParameters?.asset,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetSoftStakingRewardsHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Enable or disable Soft Staking.
     *
     * Weight: 50
     *
     * @summary Set Soft Staking (USER_DATA)
     * @param {SetSoftStakingRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SetSoftStakingResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SoftStakingApi
     * @see {@link https://developers.binance.com/docs/staking/soft-staking/Set-Soft-Staking Binance API Documentation}
     */
    public async setSoftStaking(
        requestParameters: SetSoftStakingRequest
    ): Promise<RestApiResponse<SetSoftStakingResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.setSoftStaking(
            requestParameters?.softStaking,
            requestParameters?.recvWindow
        );
        return sendRequest<SetSoftStakingResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
