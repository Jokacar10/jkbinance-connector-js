/**
 * Binance Spot WebSocket API
 *
 * OpenAPI Specifications for the Binance Spot WebSocket API
 *
 * API documents:
 * - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)
 * - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { WebsocketAPIBase, WebsocketApiResponse, WebsocketSendMsgOptions } from '@binance/common';
import type {
    SessionSubscriptionsResponse,
    UserDataStreamSubscribeResponse,
    UserDataStreamSubscribeSignatureResponse,
    UserDataStreamUnsubscribeResponse,
} from '../types';

/**
 * UserDataStreamApi - interface
 *
 * @interface UserDataStreamApi
 */
export interface UserDataStreamApiInterface {
    /**
     *
     * Weight: 2
     *
     **Data Source**:
     * Memory
     *
     * @summary WebSocket Listing all subscriptions
     * @param {SessionSubscriptionsRequest} requestParameters Request parameters.
     *
     * @returns {Promise<SessionSubscriptionsResponse>}
     * @memberof UserDataStreamApiInterface
     */
    sessionSubscriptions(
        requestParameters?: SessionSubscriptionsRequest
    ): Promise<WebsocketApiResponse<SessionSubscriptionsResponse>>;

    /**
     * Subscribe to the User Data Stream in the current WebSocket connection.
     * Weight: 2
     *
     * @summary WebSocket Subscribe to User Data Stream
     * @param {UserDataStreamSubscribeRequest} requestParameters Request parameters.
     *
     * @returns {Promise<UserDataStreamSubscribeResponse>}
     * @memberof UserDataStreamApiInterface
     */
    userDataStreamSubscribe(
        requestParameters?: UserDataStreamSubscribeRequest
    ): Promise<WebsocketApiResponse<UserDataStreamSubscribeResponse>>;

    /**
     *
     * Weight: 2
     *
     * @summary WebSocket Subscribe to User Data Stream through signature subscription
     * @param {UserDataStreamSubscribeSignatureRequest} requestParameters Request parameters.
     *
     * @returns {Promise<UserDataStreamSubscribeSignatureResponse>}
     * @memberof UserDataStreamApiInterface
     */
    userDataStreamSubscribeSignature(
        requestParameters?: UserDataStreamSubscribeSignatureRequest
    ): Promise<WebsocketApiResponse<UserDataStreamSubscribeSignatureResponse>>;

    /**
     * Stop listening to the User Data Stream in the current WebSocket connection.
     *
     * Note that `session.logout` will only close the subscription created with `userdataStream.subscribe` but not subscriptions opened with `userDataStream.subscribe.signature`.
     * Weight: 2
     *
     * @summary WebSocket Unsubscribe from User Data Stream
     * @param {UserDataStreamUnsubscribeRequest} requestParameters Request parameters.
     *
     * @returns {Promise<UserDataStreamUnsubscribeResponse>}
     * @memberof UserDataStreamApiInterface
     */
    userDataStreamUnsubscribe(
        requestParameters?: UserDataStreamUnsubscribeRequest
    ): Promise<WebsocketApiResponse<UserDataStreamUnsubscribeResponse>>;
}

/**
 * Request parameters for sessionSubscriptions operation in UserDataStreamApi.
 * @interface SessionSubscriptionsRequest
 */
export interface SessionSubscriptionsRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof UserDataStreamApiSessionSubscriptions
     */
    readonly id?: string;
}

/**
 * Request parameters for userDataStreamSubscribe operation in UserDataStreamApi.
 * @interface UserDataStreamSubscribeRequest
 */
export interface UserDataStreamSubscribeRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof UserDataStreamApiUserDataStreamSubscribe
     */
    readonly id?: string;
}

/**
 * Request parameters for userDataStreamSubscribeSignature operation in UserDataStreamApi.
 * @interface UserDataStreamSubscribeSignatureRequest
 */
export interface UserDataStreamSubscribeSignatureRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof UserDataStreamApiUserDataStreamSubscribeSignature
     */
    readonly id?: string;
}

/**
 * Request parameters for userDataStreamUnsubscribe operation in UserDataStreamApi.
 * @interface UserDataStreamUnsubscribeRequest
 */
export interface UserDataStreamUnsubscribeRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof UserDataStreamApiUserDataStreamUnsubscribe
     */
    readonly id?: string;

    /**
     * When called with no parameter, this will close all subscriptions. <br>When called with the `subscriptionId` parameter, this will attempt to close the subscription with that subscription id, if it exists.
     * @type {number}
     * @memberof UserDataStreamApiUserDataStreamUnsubscribe
     */
    readonly subscriptionId?: number;
}

/**
 * UserDataStreamApi - object-oriented interface
 * @class UserDataStreamApi
 * @extends {WebsocketAPIBase}
 */
export class UserDataStreamApi implements UserDataStreamApiInterface {
    private readonly websocketBase: WebsocketAPIBase;

    constructor(websocketBase: WebsocketAPIBase) {
        this.websocketBase = websocketBase;
    }

    /**
     *
     * Weight: 2
     *
     **Data Source**:
     * Memory
     *
     * @summary WebSocket Listing all subscriptions
     * @param {SessionSubscriptionsRequest} requestParameters Request parameters.
     * @returns {Promise<SessionSubscriptionsResponse>}
     * @memberof UserDataStreamApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/user-Data-Stream-requests#listing-all-subscriptions Binance API Documentation}
     */
    public sessionSubscriptions(
        requestParameters: SessionSubscriptionsRequest = {}
    ): Promise<WebsocketApiResponse<SessionSubscriptionsResponse>> {
        return this.websocketBase.sendMessage<SessionSubscriptionsResponse>(
            '/session.subscriptions'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }

    /**
     * Subscribe to the User Data Stream in the current WebSocket connection.
     * Weight: 2
     *
     * @summary WebSocket Subscribe to User Data Stream
     * @param {UserDataStreamSubscribeRequest} requestParameters Request parameters.
     * @returns {Promise<UserDataStreamSubscribeResponse>}
     * @memberof UserDataStreamApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/user-Data-Stream-requests#subscribe-to-user-data-stream-user_stream Binance API Documentation}
     */
    public userDataStreamSubscribe(
        requestParameters: UserDataStreamSubscribeRequest = {}
    ): Promise<WebsocketApiResponse<UserDataStreamSubscribeResponse>> {
        return this.websocketBase.sendMessage<UserDataStreamSubscribeResponse>(
            '/userDataStream.subscribe'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }

    /**
     *
     * Weight: 2
     *
     * @summary WebSocket Subscribe to User Data Stream through signature subscription
     * @param {UserDataStreamSubscribeSignatureRequest} requestParameters Request parameters.
     * @returns {Promise<UserDataStreamSubscribeSignatureResponse>}
     * @memberof UserDataStreamApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/user-Data-Stream-requests#subscribe-to-user-data-stream-through-signature-subscription-user_stream Binance API Documentation}
     */
    public userDataStreamSubscribeSignature(
        requestParameters: UserDataStreamSubscribeSignatureRequest = {}
    ): Promise<WebsocketApiResponse<UserDataStreamSubscribeSignatureResponse>> {
        return this.websocketBase.sendMessage<UserDataStreamSubscribeSignatureResponse>(
            '/userDataStream.subscribe.signature'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Stop listening to the User Data Stream in the current WebSocket connection.
     *
     * Note that `session.logout` will only close the subscription created with `userdataStream.subscribe` but not subscriptions opened with `userDataStream.subscribe.signature`.
     * Weight: 2
     *
     * @summary WebSocket Unsubscribe from User Data Stream
     * @param {UserDataStreamUnsubscribeRequest} requestParameters Request parameters.
     * @returns {Promise<UserDataStreamUnsubscribeResponse>}
     * @memberof UserDataStreamApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/user-Data-Stream-requests#unsubscribe-from-user-data-stream Binance API Documentation}
     */
    public userDataStreamUnsubscribe(
        requestParameters: UserDataStreamUnsubscribeRequest = {}
    ): Promise<WebsocketApiResponse<UserDataStreamUnsubscribeResponse>> {
        return this.websocketBase.sendMessage<UserDataStreamUnsubscribeResponse>(
            '/userDataStream.unsubscribe'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }
}
