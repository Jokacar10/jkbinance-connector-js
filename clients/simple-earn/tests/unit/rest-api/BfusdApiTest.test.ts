/**
 * Binance Simple Earn REST API
 *
 * OpenAPI Specification for the Binance Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { jest, expect, beforeEach, describe, it } from '@jest/globals';
import { ConfigurationRestAPI, type RestApiResponse } from '@binance/common';

import { BfusdApi } from '../../../src/rest-api';
import {
    GetBfusdAccountRequest,
    GetBfusdQuotaDetailsRequest,
    GetBfusdRateHistoryRequest,
    GetBfusdRedemptionHistoryRequest,
    GetBfusdRewardsHistoryRequest,
    GetBfusdSubscriptionHistoryRequest,
    RedeemBfusdRequest,
    SubscribeBfusdRequest,
} from '../../../src/rest-api';
import type {
    GetBfusdAccountResponse,
    GetBfusdQuotaDetailsResponse,
    GetBfusdRateHistoryResponse,
    GetBfusdRedemptionHistoryResponse,
    GetBfusdRewardsHistoryResponse,
    GetBfusdSubscriptionHistoryResponse,
    RedeemBfusdResponse,
    SubscribeBfusdResponse,
} from '../../../src/rest-api/types';

describe('BfusdApi', () => {
    let client: BfusdApi;
    let config: ConfigurationRestAPI;
    let mockResponse: object = {};

    beforeEach(() => {
        config = new ConfigurationRestAPI({
            apiKey: 'test-api-key',
            apiSecret: 'test-api-secret',
            basePath: '',
        });
        client = new BfusdApi(config);
    });

    describe('getBfusdAccount()', () => {
        it('should execute getBfusdAccount() successfully with required parameters only', async () => {
            mockResponse = { bfusdAmount: '100', totalProfit: '12.81' };

            const spy = jest.spyOn(client, 'getBfusdAccount').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetBfusdAccountResponse>)
            );
            const response = await client.getBfusdAccount();
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getBfusdAccount() successfully with optional parameters', async () => {
            const params: GetBfusdAccountRequest = {
                recvWindow: 5000,
            };

            mockResponse = { bfusdAmount: '100', totalProfit: '12.81' };

            const spy = jest.spyOn(client, 'getBfusdAccount').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetBfusdAccountResponse>)
            );
            const response = await client.getBfusdAccount(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw an error when server is returning an error', async () => {
            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest.spyOn(client, 'getBfusdAccount').mockRejectedValueOnce(mockError);
            await expect(client.getBfusdAccount()).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });

    describe('getBfusdQuotaDetails()', () => {
        it('should execute getBfusdQuotaDetails() successfully with required parameters only', async () => {
            mockResponse = {
                fastRedemptionQuota: {
                    leftQuota: '2',
                    minimum: '0.1',
                    fee: '0.001',
                    freeQuota: '100',
                },
                standardRedemptionQuota: {
                    leftQuota: '2',
                    minimum: '0.1',
                    fee: '0.0005',
                    redeemPeriod: 3,
                },
                subscribeEnable: true,
                redeemEnable: true,
            };

            const spy = jest.spyOn(client, 'getBfusdQuotaDetails').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetBfusdQuotaDetailsResponse>)
            );
            const response = await client.getBfusdQuotaDetails();
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getBfusdQuotaDetails() successfully with optional parameters', async () => {
            const params: GetBfusdQuotaDetailsRequest = {
                recvWindow: 5000,
            };

            mockResponse = {
                fastRedemptionQuota: {
                    leftQuota: '2',
                    minimum: '0.1',
                    fee: '0.001',
                    freeQuota: '100',
                },
                standardRedemptionQuota: {
                    leftQuota: '2',
                    minimum: '0.1',
                    fee: '0.0005',
                    redeemPeriod: 3,
                },
                subscribeEnable: true,
                redeemEnable: true,
            };

            const spy = jest.spyOn(client, 'getBfusdQuotaDetails').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetBfusdQuotaDetailsResponse>)
            );
            const response = await client.getBfusdQuotaDetails(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw an error when server is returning an error', async () => {
            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest.spyOn(client, 'getBfusdQuotaDetails').mockRejectedValueOnce(mockError);
            await expect(client.getBfusdQuotaDetails()).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });

    describe('getBfusdRateHistory()', () => {
        it('should execute getBfusdRateHistory() successfully with required parameters only', async () => {
            mockResponse = {
                rows: [{ annualPercentageRate: '0.0418', time: 1577233578000 }],
                total: '1',
            };

            const spy = jest.spyOn(client, 'getBfusdRateHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetBfusdRateHistoryResponse>)
            );
            const response = await client.getBfusdRateHistory();
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getBfusdRateHistory() successfully with optional parameters', async () => {
            const params: GetBfusdRateHistoryRequest = {
                startTime: 1623319461670,
                endTime: 1641782889000,
                current: 1,
                size: 10,
                recvWindow: 5000,
            };

            mockResponse = {
                rows: [{ annualPercentageRate: '0.0418', time: 1577233578000 }],
                total: '1',
            };

            const spy = jest.spyOn(client, 'getBfusdRateHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetBfusdRateHistoryResponse>)
            );
            const response = await client.getBfusdRateHistory(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw an error when server is returning an error', async () => {
            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest.spyOn(client, 'getBfusdRateHistory').mockRejectedValueOnce(mockError);
            await expect(client.getBfusdRateHistory()).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });

    describe('getBfusdRedemptionHistory()', () => {
        it('should execute getBfusdRedemptionHistory() successfully with required parameters only', async () => {
            mockResponse = {
                rows: [
                    {
                        time: 1575018510000,
                        asset: 'BFUSD',
                        amount: '51',
                        receiveAsset: 'USDT',
                        receiveAmount: '50',
                        fee: '1',
                        arrivalTime: 1575018510000,
                        status: 'SUCCESS',
                    },
                ],
                total: 1,
            };

            const spy = jest.spyOn(client, 'getBfusdRedemptionHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetBfusdRedemptionHistoryResponse>)
            );
            const response = await client.getBfusdRedemptionHistory();
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getBfusdRedemptionHistory() successfully with optional parameters', async () => {
            const params: GetBfusdRedemptionHistoryRequest = {
                startTime: 1623319461670,
                endTime: 1641782889000,
                current: 1,
                size: 10,
                recvWindow: 5000,
            };

            mockResponse = {
                rows: [
                    {
                        time: 1575018510000,
                        asset: 'BFUSD',
                        amount: '51',
                        receiveAsset: 'USDT',
                        receiveAmount: '50',
                        fee: '1',
                        arrivalTime: 1575018510000,
                        status: 'SUCCESS',
                    },
                ],
                total: 1,
            };

            const spy = jest.spyOn(client, 'getBfusdRedemptionHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetBfusdRedemptionHistoryResponse>)
            );
            const response = await client.getBfusdRedemptionHistory(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw an error when server is returning an error', async () => {
            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'getBfusdRedemptionHistory')
                .mockRejectedValueOnce(mockError);
            await expect(client.getBfusdRedemptionHistory()).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });

    describe('getBfusdRewardsHistory()', () => {
        it('should execute getBfusdRewardsHistory() successfully with required parameters only', async () => {
            mockResponse = {
                rows: [
                    {
                        time: 1575018510000,
                        rewardsAmount: '1',
                        BFUSDPosition: '100',
                        annualPercentageRate: '0.0418',
                    },
                ],
                total: 1,
            };

            const spy = jest.spyOn(client, 'getBfusdRewardsHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetBfusdRewardsHistoryResponse>)
            );
            const response = await client.getBfusdRewardsHistory();
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getBfusdRewardsHistory() successfully with optional parameters', async () => {
            const params: GetBfusdRewardsHistoryRequest = {
                startTime: 1623319461670,
                endTime: 1641782889000,
                current: 1,
                size: 10,
                recvWindow: 5000,
            };

            mockResponse = {
                rows: [
                    {
                        time: 1575018510000,
                        rewardsAmount: '1',
                        BFUSDPosition: '100',
                        annualPercentageRate: '0.0418',
                    },
                ],
                total: 1,
            };

            const spy = jest.spyOn(client, 'getBfusdRewardsHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetBfusdRewardsHistoryResponse>)
            );
            const response = await client.getBfusdRewardsHistory(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw an error when server is returning an error', async () => {
            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'getBfusdRewardsHistory')
                .mockRejectedValueOnce(mockError);
            await expect(client.getBfusdRewardsHistory()).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });

    describe('getBfusdSubscriptionHistory()', () => {
        it('should execute getBfusdSubscriptionHistory() successfully with required parameters only', async () => {
            mockResponse = {
                rows: [
                    {
                        time: 1575018510000,
                        asset: 'USDT',
                        amount: '100',
                        receiveAsset: 'BFUSD',
                        receiveAmount: '100',
                        status: 'SUCCESS',
                    },
                ],
                total: 1,
            };

            const spy = jest.spyOn(client, 'getBfusdSubscriptionHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetBfusdSubscriptionHistoryResponse>)
            );
            const response = await client.getBfusdSubscriptionHistory();
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getBfusdSubscriptionHistory() successfully with optional parameters', async () => {
            const params: GetBfusdSubscriptionHistoryRequest = {
                asset: 'asset_example',
                startTime: 1623319461670,
                endTime: 1641782889000,
                current: 1,
                size: 10,
                recvWindow: 5000,
            };

            mockResponse = {
                rows: [
                    {
                        time: 1575018510000,
                        asset: 'USDT',
                        amount: '100',
                        receiveAsset: 'BFUSD',
                        receiveAmount: '100',
                        status: 'SUCCESS',
                    },
                ],
                total: 1,
            };

            const spy = jest.spyOn(client, 'getBfusdSubscriptionHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetBfusdSubscriptionHistoryResponse>)
            );
            const response = await client.getBfusdSubscriptionHistory(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw an error when server is returning an error', async () => {
            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'getBfusdSubscriptionHistory')
                .mockRejectedValueOnce(mockError);
            await expect(client.getBfusdSubscriptionHistory()).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });

    describe('redeemBfusd()', () => {
        it('should execute redeemBfusd() successfully with required parameters only', async () => {
            const params: RedeemBfusdRequest = {
                amount: 1.0,
                type: 's',
            };

            mockResponse = {
                success: true,
                receiveAmount: '0.23092091',
                fee: '0.00000012',
                arrivalTime: 1575018510000,
            };

            const spy = jest.spyOn(client, 'redeemBfusd').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<RedeemBfusdResponse>)
            );
            const response = await client.redeemBfusd(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute redeemBfusd() successfully with optional parameters', async () => {
            const params: RedeemBfusdRequest = {
                amount: 1.0,
                type: 's',
                recvWindow: 5000,
            };

            mockResponse = {
                success: true,
                receiveAmount: '0.23092091',
                fee: '0.00000012',
                arrivalTime: 1575018510000,
            };

            const spy = jest.spyOn(client, 'redeemBfusd').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<RedeemBfusdResponse>)
            );
            const response = await client.redeemBfusd(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw RequiredError when amount is missing', async () => {
            const _params: RedeemBfusdRequest = {
                amount: 1.0,
                type: 's',
            };
            const params = Object.assign({ ..._params });
            delete params?.amount;

            await expect(client.redeemBfusd(params)).rejects.toThrow(
                'Required parameter amount was null or undefined when calling redeemBfusd.'
            );
        });

        it('should throw RequiredError when type is missing', async () => {
            const _params: RedeemBfusdRequest = {
                amount: 1.0,
                type: 's',
            };
            const params = Object.assign({ ..._params });
            delete params?.type;

            await expect(client.redeemBfusd(params)).rejects.toThrow(
                'Required parameter type was null or undefined when calling redeemBfusd.'
            );
        });

        it('should throw an error when server is returning an error', async () => {
            const params: RedeemBfusdRequest = {
                amount: 1.0,
                type: 's',
            };

            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest.spyOn(client, 'redeemBfusd').mockRejectedValueOnce(mockError);
            await expect(client.redeemBfusd(params)).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });

    describe('subscribeBfusd()', () => {
        it('should execute subscribeBfusd() successfully with required parameters only', async () => {
            const params: SubscribeBfusdRequest = {
                asset: 'asset_example',
                amount: 1.0,
            };

            mockResponse = { success: true, bfusdAmount: '0.22091092' };

            const spy = jest.spyOn(client, 'subscribeBfusd').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<SubscribeBfusdResponse>)
            );
            const response = await client.subscribeBfusd(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute subscribeBfusd() successfully with optional parameters', async () => {
            const params: SubscribeBfusdRequest = {
                asset: 'asset_example',
                amount: 1.0,
                recvWindow: 5000,
            };

            mockResponse = { success: true, bfusdAmount: '0.22091092' };

            const spy = jest.spyOn(client, 'subscribeBfusd').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<SubscribeBfusdResponse>)
            );
            const response = await client.subscribeBfusd(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw RequiredError when asset is missing', async () => {
            const _params: SubscribeBfusdRequest = {
                asset: 'asset_example',
                amount: 1.0,
            };
            const params = Object.assign({ ..._params });
            delete params?.asset;

            await expect(client.subscribeBfusd(params)).rejects.toThrow(
                'Required parameter asset was null or undefined when calling subscribeBfusd.'
            );
        });

        it('should throw RequiredError when amount is missing', async () => {
            const _params: SubscribeBfusdRequest = {
                asset: 'asset_example',
                amount: 1.0,
            };
            const params = Object.assign({ ..._params });
            delete params?.amount;

            await expect(client.subscribeBfusd(params)).rejects.toThrow(
                'Required parameter amount was null or undefined when calling subscribeBfusd.'
            );
        });

        it('should throw an error when server is returning an error', async () => {
            const params: SubscribeBfusdRequest = {
                asset: 'asset_example',
                amount: 1.0,
            };

            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest.spyOn(client, 'subscribeBfusd').mockRejectedValueOnce(mockError);
            await expect(client.subscribeBfusd(params)).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });
});
