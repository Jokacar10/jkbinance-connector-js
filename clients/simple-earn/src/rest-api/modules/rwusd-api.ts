/**
 * Binance Simple Earn REST API
 *
 * OpenAPI Specification for the Binance Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    GetRwusdAccountResponse,
    GetRwusdQuotaDetailsResponse,
    GetRwusdRateHistoryResponse,
    GetRwusdRedemptionHistoryResponse,
    GetRwusdRewardsHistoryResponse,
    GetRwusdSubscriptionHistoryResponse,
    RedeemRwusdResponse,
    SubscribeRwusdResponse,
} from '../types';

/**
 * RwusdApi - axios parameter creator
 */
const RwusdApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get RWUSD account information.
         *
         * Weight: 150
         *
         * @summary Get RWUSD Account (USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getRwusdAccount: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/rwusd/account',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get RWUSD quota details including subscription quota, fast redemption quota, and standard redemption quota.
         *
         * Weight: 150
         *
         * @summary Get RWUSD Quota Details (USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getRwusdQuotaDetails: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/rwusd/quota',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get RWUSD rate history sorted by descending order.
         *
         * The time between `startTime` and `endTime` cannot be longer than 6 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
         * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time minus one month, and data between `startTime` and `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get RWUSD Rate History (USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getRwusdRateHistory: async (
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/rwusd/history/rateHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get RWUSD redemption history.
         *
         * The time between `startTime` and `endTime` cannot be longer than 6 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
         * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time minus one month, and data between `startTime` and `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get RWUSD Redemption History (USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getRwusdRedemptionHistory: async (
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/rwusd/history/redemptionHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get RWUSD rewards history.
         *
         * The time between `startTime` and `endTime` cannot be longer than 6 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
         * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time minus one month, and data between `startTime` and `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get RWUSD Rewards History (USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getRwusdRewardsHistory: async (
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/rwusd/history/rewardsHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get RWUSD subscription history
         *
         * The time between `startTime` and `endTime` cannot be longer than 6 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
         * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time advanced by one month, and data between `startTime` and `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get RWUSD subscription history(USER_DATA)
         * @param {string} [asset] USDC or USDT
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getRwusdSubscriptionHistory: async (
            asset?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/rwusd/history/subscriptionHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Redeem RWUSD to USDC
         *
         * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
         *
         * Weight: 150
         *
         * @summary Redeem RWUSD(TRADE)
         * @param {number} amount Amount
         * @param {string} type FAST or STANDARD, defaults to STANDARD
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        redeemRwusd: async (
            amount: number,
            type: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('redeemRwusd', 'amount', amount);
            // verify required parameter 'type' is not null or undefined
            assertParamExists('redeemRwusd', 'type', type);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (type !== undefined && type !== null) {
                localVarQueryParameter['type'] = type;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/rwusd/redeem',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Subscribe RWUSD
         *
         * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
         *
         * Weight: 150
         *
         * @summary Subscribe RWUSD(TRADE)
         * @param {string} asset USDT or USDC (whichever is eligible)
         * @param {number} amount Amount
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        subscribeRwusd: async (
            asset: string,
            amount: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('subscribeRwusd', 'asset', asset);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subscribeRwusd', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/rwusd/subscribe',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * RwusdApi - interface
 * @interface RwusdApi
 */
export interface RwusdApiInterface {
    /**
     * Get RWUSD account information.
     *
     * Weight: 150
     *
     * @summary Get RWUSD Account (USER_DATA)
     * @param {GetRwusdAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof RwusdApiInterface
     */
    getRwusdAccount(
        requestParameters?: GetRwusdAccountRequest
    ): Promise<RestApiResponse<GetRwusdAccountResponse>>;
    /**
     * Get RWUSD quota details including subscription quota, fast redemption quota, and standard redemption quota.
     *
     * Weight: 150
     *
     * @summary Get RWUSD Quota Details (USER_DATA)
     * @param {GetRwusdQuotaDetailsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof RwusdApiInterface
     */
    getRwusdQuotaDetails(
        requestParameters?: GetRwusdQuotaDetailsRequest
    ): Promise<RestApiResponse<GetRwusdQuotaDetailsResponse>>;
    /**
     * Get RWUSD rate history sorted by descending order.
     *
     * The time between `startTime` and `endTime` cannot be longer than 6 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
     * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time minus one month, and data between `startTime` and `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get RWUSD Rate History (USER_DATA)
     * @param {GetRwusdRateHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof RwusdApiInterface
     */
    getRwusdRateHistory(
        requestParameters?: GetRwusdRateHistoryRequest
    ): Promise<RestApiResponse<GetRwusdRateHistoryResponse>>;
    /**
     * Get RWUSD redemption history.
     *
     * The time between `startTime` and `endTime` cannot be longer than 6 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
     * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time minus one month, and data between `startTime` and `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get RWUSD Redemption History (USER_DATA)
     * @param {GetRwusdRedemptionHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof RwusdApiInterface
     */
    getRwusdRedemptionHistory(
        requestParameters?: GetRwusdRedemptionHistoryRequest
    ): Promise<RestApiResponse<GetRwusdRedemptionHistoryResponse>>;
    /**
     * Get RWUSD rewards history.
     *
     * The time between `startTime` and `endTime` cannot be longer than 6 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
     * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time minus one month, and data between `startTime` and `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get RWUSD Rewards History (USER_DATA)
     * @param {GetRwusdRewardsHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof RwusdApiInterface
     */
    getRwusdRewardsHistory(
        requestParameters?: GetRwusdRewardsHistoryRequest
    ): Promise<RestApiResponse<GetRwusdRewardsHistoryResponse>>;
    /**
     * Get RWUSD subscription history
     *
     * The time between `startTime` and `endTime` cannot be longer than 6 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
     * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time advanced by one month, and data between `startTime` and `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get RWUSD subscription history(USER_DATA)
     * @param {GetRwusdSubscriptionHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof RwusdApiInterface
     */
    getRwusdSubscriptionHistory(
        requestParameters?: GetRwusdSubscriptionHistoryRequest
    ): Promise<RestApiResponse<GetRwusdSubscriptionHistoryResponse>>;
    /**
     * Redeem RWUSD to USDC
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Redeem RWUSD(TRADE)
     * @param {RedeemRwusdRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof RwusdApiInterface
     */
    redeemRwusd(
        requestParameters: RedeemRwusdRequest
    ): Promise<RestApiResponse<RedeemRwusdResponse>>;
    /**
     * Subscribe RWUSD
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Subscribe RWUSD(TRADE)
     * @param {SubscribeRwusdRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof RwusdApiInterface
     */
    subscribeRwusd(
        requestParameters: SubscribeRwusdRequest
    ): Promise<RestApiResponse<SubscribeRwusdResponse>>;
}

/**
 * Request parameters for getRwusdAccount operation in RwusdApi.
 * @interface GetRwusdAccountRequest
 */
export interface GetRwusdAccountRequest {
    /**
     *
     * @type {number}
     * @memberof RwusdApiGetRwusdAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getRwusdQuotaDetails operation in RwusdApi.
 * @interface GetRwusdQuotaDetailsRequest
 */
export interface GetRwusdQuotaDetailsRequest {
    /**
     *
     * @type {number}
     * @memberof RwusdApiGetRwusdQuotaDetails
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getRwusdRateHistory operation in RwusdApi.
 * @interface GetRwusdRateHistoryRequest
 */
export interface GetRwusdRateHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof RwusdApiGetRwusdRateHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof RwusdApiGetRwusdRateHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof RwusdApiGetRwusdRateHistory
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof RwusdApiGetRwusdRateHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof RwusdApiGetRwusdRateHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getRwusdRedemptionHistory operation in RwusdApi.
 * @interface GetRwusdRedemptionHistoryRequest
 */
export interface GetRwusdRedemptionHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof RwusdApiGetRwusdRedemptionHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof RwusdApiGetRwusdRedemptionHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof RwusdApiGetRwusdRedemptionHistory
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof RwusdApiGetRwusdRedemptionHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof RwusdApiGetRwusdRedemptionHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getRwusdRewardsHistory operation in RwusdApi.
 * @interface GetRwusdRewardsHistoryRequest
 */
export interface GetRwusdRewardsHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof RwusdApiGetRwusdRewardsHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof RwusdApiGetRwusdRewardsHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof RwusdApiGetRwusdRewardsHistory
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof RwusdApiGetRwusdRewardsHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof RwusdApiGetRwusdRewardsHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getRwusdSubscriptionHistory operation in RwusdApi.
 * @interface GetRwusdSubscriptionHistoryRequest
 */
export interface GetRwusdSubscriptionHistoryRequest {
    /**
     * USDC or USDT
     * @type {string}
     * @memberof RwusdApiGetRwusdSubscriptionHistory
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof RwusdApiGetRwusdSubscriptionHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof RwusdApiGetRwusdSubscriptionHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof RwusdApiGetRwusdSubscriptionHistory
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof RwusdApiGetRwusdSubscriptionHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof RwusdApiGetRwusdSubscriptionHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for redeemRwusd operation in RwusdApi.
 * @interface RedeemRwusdRequest
 */
export interface RedeemRwusdRequest {
    /**
     * Amount
     * @type {number}
     * @memberof RwusdApiRedeemRwusd
     */
    readonly amount: number;

    /**
     * FAST or STANDARD, defaults to STANDARD
     * @type {string}
     * @memberof RwusdApiRedeemRwusd
     */
    readonly type: string;

    /**
     *
     * @type {number}
     * @memberof RwusdApiRedeemRwusd
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for subscribeRwusd operation in RwusdApi.
 * @interface SubscribeRwusdRequest
 */
export interface SubscribeRwusdRequest {
    /**
     * USDT or USDC (whichever is eligible)
     * @type {string}
     * @memberof RwusdApiSubscribeRwusd
     */
    readonly asset: string;

    /**
     * Amount
     * @type {number}
     * @memberof RwusdApiSubscribeRwusd
     */
    readonly amount: number;

    /**
     *
     * @type {number}
     * @memberof RwusdApiSubscribeRwusd
     */
    readonly recvWindow?: number;
}

/**
 * RwusdApi - object-oriented interface
 * @class RwusdApi
 */
export class RwusdApi implements RwusdApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = RwusdApiAxiosParamCreator(configuration);
    }

    /**
     * Get RWUSD account information.
     *
     * Weight: 150
     *
     * @summary Get RWUSD Account (USER_DATA)
     * @param {GetRwusdAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetRwusdAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof RwusdApi
     * @see {@link https://developers.binance.com/docs/simple_earn/rwusd/account/ Binance API Documentation}
     */
    public async getRwusdAccount(
        requestParameters: GetRwusdAccountRequest = {}
    ): Promise<RestApiResponse<GetRwusdAccountResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getRwusdAccount(
            requestParameters?.recvWindow
        );
        return sendRequest<GetRwusdAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get RWUSD quota details including subscription quota, fast redemption quota, and standard redemption quota.
     *
     * Weight: 150
     *
     * @summary Get RWUSD Quota Details (USER_DATA)
     * @param {GetRwusdQuotaDetailsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetRwusdQuotaDetailsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof RwusdApi
     * @see {@link https://developers.binance.com/docs/simple_earn/rwusd/account/Get-RWUSD-Quota-Details Binance API Documentation}
     */
    public async getRwusdQuotaDetails(
        requestParameters: GetRwusdQuotaDetailsRequest = {}
    ): Promise<RestApiResponse<GetRwusdQuotaDetailsResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getRwusdQuotaDetails(
            requestParameters?.recvWindow
        );
        return sendRequest<GetRwusdQuotaDetailsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get RWUSD rate history sorted by descending order.
     *
     * The time between `startTime` and `endTime` cannot be longer than 6 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
     * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time minus one month, and data between `startTime` and `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get RWUSD Rate History (USER_DATA)
     * @param {GetRwusdRateHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetRwusdRateHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof RwusdApi
     * @see {@link https://developers.binance.com/docs/simple_earn/rwusd/history/Get-RWUSD-Rate-History Binance API Documentation}
     */
    public async getRwusdRateHistory(
        requestParameters: GetRwusdRateHistoryRequest = {}
    ): Promise<RestApiResponse<GetRwusdRateHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getRwusdRateHistory(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetRwusdRateHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get RWUSD redemption history.
     *
     * The time between `startTime` and `endTime` cannot be longer than 6 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
     * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time minus one month, and data between `startTime` and `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get RWUSD Redemption History (USER_DATA)
     * @param {GetRwusdRedemptionHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetRwusdRedemptionHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof RwusdApi
     * @see {@link https://developers.binance.com/docs/simple_earn/rwusd/history/Get-RWUSD-Redemption-History Binance API Documentation}
     */
    public async getRwusdRedemptionHistory(
        requestParameters: GetRwusdRedemptionHistoryRequest = {}
    ): Promise<RestApiResponse<GetRwusdRedemptionHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getRwusdRedemptionHistory(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetRwusdRedemptionHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get RWUSD rewards history.
     *
     * The time between `startTime` and `endTime` cannot be longer than 6 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
     * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time minus one month, and data between `startTime` and `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get RWUSD Rewards History (USER_DATA)
     * @param {GetRwusdRewardsHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetRwusdRewardsHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof RwusdApi
     * @see {@link https://developers.binance.com/docs/simple_earn/rwusd/history/Get-RWUSD-Rewards-History Binance API Documentation}
     */
    public async getRwusdRewardsHistory(
        requestParameters: GetRwusdRewardsHistoryRequest = {}
    ): Promise<RestApiResponse<GetRwusdRewardsHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getRwusdRewardsHistory(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetRwusdRewardsHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get RWUSD subscription history
     *
     * The time between `startTime` and `endTime` cannot be longer than 6 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
     * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time advanced by one month, and data between `startTime` and `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get RWUSD subscription history(USER_DATA)
     * @param {GetRwusdSubscriptionHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetRwusdSubscriptionHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof RwusdApi
     * @see {@link https://developers.binance.com/docs/simple_earn/rwusd/history/Get-RWUSD-subscription-history Binance API Documentation}
     */
    public async getRwusdSubscriptionHistory(
        requestParameters: GetRwusdSubscriptionHistoryRequest = {}
    ): Promise<RestApiResponse<GetRwusdSubscriptionHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getRwusdSubscriptionHistory(
            requestParameters?.asset,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetRwusdSubscriptionHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Redeem RWUSD to USDC
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Redeem RWUSD(TRADE)
     * @param {RedeemRwusdRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RedeemRwusdResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof RwusdApi
     * @see {@link https://developers.binance.com/docs/simple_earn/rwusd/earn/Redeem-RWUSD Binance API Documentation}
     */
    public async redeemRwusd(
        requestParameters: RedeemRwusdRequest
    ): Promise<RestApiResponse<RedeemRwusdResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.redeemRwusd(
            requestParameters?.amount,
            requestParameters?.type,
            requestParameters?.recvWindow
        );
        return sendRequest<RedeemRwusdResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Subscribe RWUSD
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Subscribe RWUSD(TRADE)
     * @param {SubscribeRwusdRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SubscribeRwusdResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof RwusdApi
     * @see {@link https://developers.binance.com/docs/simple_earn/rwusd/earn/Subscribe-RWUSD Binance API Documentation}
     */
    public async subscribeRwusd(
        requestParameters: SubscribeRwusdRequest
    ): Promise<RestApiResponse<SubscribeRwusdResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.subscribeRwusd(
            requestParameters?.asset,
            requestParameters?.amount,
            requestParameters?.recvWindow
        );
        return sendRequest<SubscribeRwusdResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
