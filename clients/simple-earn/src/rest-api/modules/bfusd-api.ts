/**
 * Binance Simple Earn REST API
 *
 * OpenAPI Specification for the Binance Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    GetBfusdAccountResponse,
    GetBfusdQuotaDetailsResponse,
    GetBfusdRateHistoryResponse,
    GetBfusdRedemptionHistoryResponse,
    GetBfusdRewardsHistoryResponse,
    GetBfusdSubscriptionHistoryResponse,
    RedeemBfusdResponse,
    SubscribeBfusdResponse,
} from '../types';

/**
 * BfusdApi - axios parameter creator
 */
const BfusdApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get BFUSD account information.
         *
         * Weight: 150
         *
         * @summary Get BFUSD Account (USER_DATA)
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getBfusdAccount: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/bfusd/account',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get BFUSD quota details including fast redemption quota and standard redemption quota.
         *
         * Weight: 150
         *
         * @summary Get BFUSD Quota Details (USER_DATA)
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getBfusdQuotaDetails: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/bfusd/quota',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get BFUSD rate history sorted by descending order.
         *
         * The time between `startTime` and `endTime` cannot be longer than 6 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
         * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time minus one month, and data between `startTime` and `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get BFUSD Rate History (USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Starts from 1. Default: 1
         * @param {number} [size] Number of results per page. Default: 10, Max: 100
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getBfusdRateHistory: async (
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/bfusd/history/rateHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get BFUSD redemption history.
         *
         * The time between `startTime` and `endTime` cannot be longer than 6 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
         * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time minus one month, and data between `startTime` and `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get BFUSD Redemption History (USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Starts from 1. Default: 1
         * @param {number} [size] Number of results per page. Default: 10, Max: 100
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getBfusdRedemptionHistory: async (
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/bfusd/history/redemptionHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get BFUSD rewards history.
         *
         * The time between `startTime` and `endTime` cannot be longer than 6 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
         * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time minus one month, and data between `startTime` and `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get BFUSD Rewards History (USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Starts from 1. Default: 1
         * @param {number} [size] Number of results per page. Default: 10, Max: 100
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getBfusdRewardsHistory: async (
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/bfusd/history/rewardsHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get BFUSD subscription history
         *
         * The time between `startTime` and `endTime` cannot be longer than 6 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
         * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time advanced by one month, and data between `startTime` and `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get BFUSD subscription history(USER_DATA)
         * @param {string} [asset] USDC or USDT
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Starts from 1. Default: 1
         * @param {number} [size] Number of results per page. Default: 10, Max: 100
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getBfusdSubscriptionHistory: async (
            asset?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/bfusd/history/subscriptionHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Redeem BFUSD to USDT
         *
         * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
         *
         * Weight: 150
         *
         * @summary Redeem BFUSD(TRADE)
         * @param {number} amount Amount
         * @param {string} type FAST or STANDARD, defaults to STANDARD
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        redeemBfusd: async (
            amount: number,
            type: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('redeemBfusd', 'amount', amount);
            // verify required parameter 'type' is not null or undefined
            assertParamExists('redeemBfusd', 'type', type);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (type !== undefined && type !== null) {
                localVarQueryParameter['type'] = type;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/bfusd/redeem',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Subscribe BFUSD
         *
         * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
         *
         * Weight: 150
         *
         * @summary Subscribe BFUSD(TRADE)
         * @param {string} asset USDT or USDC (whichever is eligible)
         * @param {number} amount Amount
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        subscribeBfusd: async (
            asset: string,
            amount: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('subscribeBfusd', 'asset', asset);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subscribeBfusd', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/bfusd/subscribe',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * BfusdApi - interface
 * @interface BfusdApi
 */
export interface BfusdApiInterface {
    /**
     * Get BFUSD account information.
     *
     * Weight: 150
     *
     * @summary Get BFUSD Account (USER_DATA)
     * @param {GetBfusdAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BfusdApiInterface
     */
    getBfusdAccount(
        requestParameters?: GetBfusdAccountRequest
    ): Promise<RestApiResponse<GetBfusdAccountResponse>>;
    /**
     * Get BFUSD quota details including fast redemption quota and standard redemption quota.
     *
     * Weight: 150
     *
     * @summary Get BFUSD Quota Details (USER_DATA)
     * @param {GetBfusdQuotaDetailsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BfusdApiInterface
     */
    getBfusdQuotaDetails(
        requestParameters?: GetBfusdQuotaDetailsRequest
    ): Promise<RestApiResponse<GetBfusdQuotaDetailsResponse>>;
    /**
     * Get BFUSD rate history sorted by descending order.
     *
     * The time between `startTime` and `endTime` cannot be longer than 6 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
     * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time minus one month, and data between `startTime` and `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get BFUSD Rate History (USER_DATA)
     * @param {GetBfusdRateHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BfusdApiInterface
     */
    getBfusdRateHistory(
        requestParameters?: GetBfusdRateHistoryRequest
    ): Promise<RestApiResponse<GetBfusdRateHistoryResponse>>;
    /**
     * Get BFUSD redemption history.
     *
     * The time between `startTime` and `endTime` cannot be longer than 6 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
     * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time minus one month, and data between `startTime` and `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get BFUSD Redemption History (USER_DATA)
     * @param {GetBfusdRedemptionHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BfusdApiInterface
     */
    getBfusdRedemptionHistory(
        requestParameters?: GetBfusdRedemptionHistoryRequest
    ): Promise<RestApiResponse<GetBfusdRedemptionHistoryResponse>>;
    /**
     * Get BFUSD rewards history.
     *
     * The time between `startTime` and `endTime` cannot be longer than 6 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
     * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time minus one month, and data between `startTime` and `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get BFUSD Rewards History (USER_DATA)
     * @param {GetBfusdRewardsHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BfusdApiInterface
     */
    getBfusdRewardsHistory(
        requestParameters?: GetBfusdRewardsHistoryRequest
    ): Promise<RestApiResponse<GetBfusdRewardsHistoryResponse>>;
    /**
     * Get BFUSD subscription history
     *
     * The time between `startTime` and `endTime` cannot be longer than 6 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
     * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time advanced by one month, and data between `startTime` and `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get BFUSD subscription history(USER_DATA)
     * @param {GetBfusdSubscriptionHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BfusdApiInterface
     */
    getBfusdSubscriptionHistory(
        requestParameters?: GetBfusdSubscriptionHistoryRequest
    ): Promise<RestApiResponse<GetBfusdSubscriptionHistoryResponse>>;
    /**
     * Redeem BFUSD to USDT
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Redeem BFUSD(TRADE)
     * @param {RedeemBfusdRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BfusdApiInterface
     */
    redeemBfusd(
        requestParameters: RedeemBfusdRequest
    ): Promise<RestApiResponse<RedeemBfusdResponse>>;
    /**
     * Subscribe BFUSD
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Subscribe BFUSD(TRADE)
     * @param {SubscribeBfusdRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BfusdApiInterface
     */
    subscribeBfusd(
        requestParameters: SubscribeBfusdRequest
    ): Promise<RestApiResponse<SubscribeBfusdResponse>>;
}

/**
 * Request parameters for getBfusdAccount operation in BfusdApi.
 * @interface GetBfusdAccountRequest
 */
export interface GetBfusdAccountRequest {
    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof BfusdApiGetBfusdAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getBfusdQuotaDetails operation in BfusdApi.
 * @interface GetBfusdQuotaDetailsRequest
 */
export interface GetBfusdQuotaDetailsRequest {
    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof BfusdApiGetBfusdQuotaDetails
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getBfusdRateHistory operation in BfusdApi.
 * @interface GetBfusdRateHistoryRequest
 */
export interface GetBfusdRateHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof BfusdApiGetBfusdRateHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof BfusdApiGetBfusdRateHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Starts from 1. Default: 1
     * @type {number}
     * @memberof BfusdApiGetBfusdRateHistory
     */
    readonly current?: number;

    /**
     * Number of results per page. Default: 10, Max: 100
     * @type {number}
     * @memberof BfusdApiGetBfusdRateHistory
     */
    readonly size?: number;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof BfusdApiGetBfusdRateHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getBfusdRedemptionHistory operation in BfusdApi.
 * @interface GetBfusdRedemptionHistoryRequest
 */
export interface GetBfusdRedemptionHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof BfusdApiGetBfusdRedemptionHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof BfusdApiGetBfusdRedemptionHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Starts from 1. Default: 1
     * @type {number}
     * @memberof BfusdApiGetBfusdRedemptionHistory
     */
    readonly current?: number;

    /**
     * Number of results per page. Default: 10, Max: 100
     * @type {number}
     * @memberof BfusdApiGetBfusdRedemptionHistory
     */
    readonly size?: number;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof BfusdApiGetBfusdRedemptionHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getBfusdRewardsHistory operation in BfusdApi.
 * @interface GetBfusdRewardsHistoryRequest
 */
export interface GetBfusdRewardsHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof BfusdApiGetBfusdRewardsHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof BfusdApiGetBfusdRewardsHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Starts from 1. Default: 1
     * @type {number}
     * @memberof BfusdApiGetBfusdRewardsHistory
     */
    readonly current?: number;

    /**
     * Number of results per page. Default: 10, Max: 100
     * @type {number}
     * @memberof BfusdApiGetBfusdRewardsHistory
     */
    readonly size?: number;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof BfusdApiGetBfusdRewardsHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getBfusdSubscriptionHistory operation in BfusdApi.
 * @interface GetBfusdSubscriptionHistoryRequest
 */
export interface GetBfusdSubscriptionHistoryRequest {
    /**
     * USDC or USDT
     * @type {string}
     * @memberof BfusdApiGetBfusdSubscriptionHistory
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof BfusdApiGetBfusdSubscriptionHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof BfusdApiGetBfusdSubscriptionHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Starts from 1. Default: 1
     * @type {number}
     * @memberof BfusdApiGetBfusdSubscriptionHistory
     */
    readonly current?: number;

    /**
     * Number of results per page. Default: 10, Max: 100
     * @type {number}
     * @memberof BfusdApiGetBfusdSubscriptionHistory
     */
    readonly size?: number;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof BfusdApiGetBfusdSubscriptionHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for redeemBfusd operation in BfusdApi.
 * @interface RedeemBfusdRequest
 */
export interface RedeemBfusdRequest {
    /**
     * Amount
     * @type {number}
     * @memberof BfusdApiRedeemBfusd
     */
    readonly amount: number;

    /**
     * FAST or STANDARD, defaults to STANDARD
     * @type {string}
     * @memberof BfusdApiRedeemBfusd
     */
    readonly type: string;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof BfusdApiRedeemBfusd
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for subscribeBfusd operation in BfusdApi.
 * @interface SubscribeBfusdRequest
 */
export interface SubscribeBfusdRequest {
    /**
     * USDT or USDC (whichever is eligible)
     * @type {string}
     * @memberof BfusdApiSubscribeBfusd
     */
    readonly asset: string;

    /**
     * Amount
     * @type {number}
     * @memberof BfusdApiSubscribeBfusd
     */
    readonly amount: number;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof BfusdApiSubscribeBfusd
     */
    readonly recvWindow?: number;
}

/**
 * BfusdApi - object-oriented interface
 * @class BfusdApi
 */
export class BfusdApi implements BfusdApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = BfusdApiAxiosParamCreator(configuration);
    }

    /**
     * Get BFUSD account information.
     *
     * Weight: 150
     *
     * @summary Get BFUSD Account (USER_DATA)
     * @param {GetBfusdAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetBfusdAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BfusdApi
     * @see {@link https://developers.binance.com/docs/simple_earn/bfusd/account/ Binance API Documentation}
     */
    public async getBfusdAccount(
        requestParameters: GetBfusdAccountRequest = {}
    ): Promise<RestApiResponse<GetBfusdAccountResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getBfusdAccount(
            requestParameters?.recvWindow
        );
        return sendRequest<GetBfusdAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get BFUSD quota details including fast redemption quota and standard redemption quota.
     *
     * Weight: 150
     *
     * @summary Get BFUSD Quota Details (USER_DATA)
     * @param {GetBfusdQuotaDetailsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetBfusdQuotaDetailsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BfusdApi
     * @see {@link https://developers.binance.com/docs/simple_earn/bfusd/account/Get-BFUSD-Quota-Details Binance API Documentation}
     */
    public async getBfusdQuotaDetails(
        requestParameters: GetBfusdQuotaDetailsRequest = {}
    ): Promise<RestApiResponse<GetBfusdQuotaDetailsResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getBfusdQuotaDetails(
            requestParameters?.recvWindow
        );
        return sendRequest<GetBfusdQuotaDetailsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get BFUSD rate history sorted by descending order.
     *
     * The time between `startTime` and `endTime` cannot be longer than 6 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
     * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time minus one month, and data between `startTime` and `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get BFUSD Rate History (USER_DATA)
     * @param {GetBfusdRateHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetBfusdRateHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BfusdApi
     * @see {@link https://developers.binance.com/docs/simple_earn/bfusd/history/Get-BFUSD-Rate-History Binance API Documentation}
     */
    public async getBfusdRateHistory(
        requestParameters: GetBfusdRateHistoryRequest = {}
    ): Promise<RestApiResponse<GetBfusdRateHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getBfusdRateHistory(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetBfusdRateHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get BFUSD redemption history.
     *
     * The time between `startTime` and `endTime` cannot be longer than 6 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
     * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time minus one month, and data between `startTime` and `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get BFUSD Redemption History (USER_DATA)
     * @param {GetBfusdRedemptionHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetBfusdRedemptionHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BfusdApi
     * @see {@link https://developers.binance.com/docs/simple_earn/bfusd/history/Get-BFUSD-Redemption-History Binance API Documentation}
     */
    public async getBfusdRedemptionHistory(
        requestParameters: GetBfusdRedemptionHistoryRequest = {}
    ): Promise<RestApiResponse<GetBfusdRedemptionHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getBfusdRedemptionHistory(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetBfusdRedemptionHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get BFUSD rewards history.
     *
     * The time between `startTime` and `endTime` cannot be longer than 6 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
     * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time minus one month, and data between `startTime` and `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get BFUSD Rewards History (USER_DATA)
     * @param {GetBfusdRewardsHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetBfusdRewardsHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BfusdApi
     * @see {@link https://developers.binance.com/docs/simple_earn/bfusd/history/Get-BFUSD-Rewards-History Binance API Documentation}
     */
    public async getBfusdRewardsHistory(
        requestParameters: GetBfusdRewardsHistoryRequest = {}
    ): Promise<RestApiResponse<GetBfusdRewardsHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getBfusdRewardsHistory(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetBfusdRewardsHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get BFUSD subscription history
     *
     * The time between `startTime` and `endTime` cannot be longer than 6 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, `endTime` will default to current time, and results from `startTime` onward will be returned.
     * If `endTime` is sent but `startTime` is not sent, `startTime` defaults to the current time advanced by one month, and data between `startTime` and `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get BFUSD subscription history(USER_DATA)
     * @param {GetBfusdSubscriptionHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetBfusdSubscriptionHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BfusdApi
     * @see {@link https://developers.binance.com/docs/simple_earn/bfusd/history/Get-BFUSD-subscription-history Binance API Documentation}
     */
    public async getBfusdSubscriptionHistory(
        requestParameters: GetBfusdSubscriptionHistoryRequest = {}
    ): Promise<RestApiResponse<GetBfusdSubscriptionHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getBfusdSubscriptionHistory(
            requestParameters?.asset,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetBfusdSubscriptionHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Redeem BFUSD to USDT
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Redeem BFUSD(TRADE)
     * @param {RedeemBfusdRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RedeemBfusdResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BfusdApi
     * @see {@link https://developers.binance.com/docs/simple_earn/bfusd/earn/Redeem-BFUSD Binance API Documentation}
     */
    public async redeemBfusd(
        requestParameters: RedeemBfusdRequest
    ): Promise<RestApiResponse<RedeemBfusdResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.redeemBfusd(
            requestParameters?.amount,
            requestParameters?.type,
            requestParameters?.recvWindow
        );
        return sendRequest<RedeemBfusdResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Subscribe BFUSD
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Subscribe BFUSD(TRADE)
     * @param {SubscribeBfusdRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SubscribeBfusdResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BfusdApi
     * @see {@link https://developers.binance.com/docs/simple_earn/bfusd/earn/Subscribe-BFUSD Binance API Documentation}
     */
    public async subscribeBfusd(
        requestParameters: SubscribeBfusdRequest
    ): Promise<RestApiResponse<SubscribeBfusdResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.subscribeBfusd(
            requestParameters?.asset,
            requestParameters?.amount,
            requestParameters?.recvWindow
        );
        return sendRequest<SubscribeBfusdResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
