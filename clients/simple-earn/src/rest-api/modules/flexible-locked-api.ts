/**
 * Binance Simple Earn REST API
 *
 * OpenAPI Specification for the Binance Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    GetCollateralRecordResponse,
    GetFlexiblePersonalLeftQuotaResponse,
    GetFlexibleProductPositionResponse,
    GetFlexibleRedemptionRecordResponse,
    GetFlexibleRewardsHistoryResponse,
    GetFlexibleSubscriptionPreviewResponse,
    GetFlexibleSubscriptionRecordResponse,
    GetLockedPersonalLeftQuotaResponse,
    GetLockedProductPositionResponse,
    GetLockedRedemptionRecordResponse,
    GetLockedRewardsHistoryResponse,
    GetLockedSubscriptionPreviewResponse,
    GetLockedSubscriptionRecordResponse,
    GetRateHistoryResponse,
    GetSimpleEarnFlexibleProductListResponse,
    GetSimpleEarnLockedProductListResponse,
    RedeemFlexibleProductResponse,
    RedeemLockedProductResponse,
    SetFlexibleAutoSubscribeResponse,
    SetLockedAutoSubscribeResponse,
    SetLockedProductRedeemOptionResponse,
    SimpleAccountResponse,
    SubscribeFlexibleProductResponse,
    SubscribeLockedProductResponse,
} from '../types';

/**
 * FlexibleLockedApi - axios parameter creator
 */
const FlexibleLockedApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get Collateral Record
         *
         * The time between `startTime` and `endTime` cannot be longer than 30 days.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 1
         *
         * @summary Get Collateral Record(USER_DATA)
         * @param {string} [productId]
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Starts from 1. Default: 1
         * @param {number} [size] Number of results per page. Default: 10, Max: 100
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getCollateralRecord: async (
            productId?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/history/collateralRecord',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Flexible Personal Left Quota
         *
         * Weight: 150
         *
         * @summary Get Flexible Personal Left Quota(USER_DATA)
         * @param {string} productId
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getFlexiblePersonalLeftQuota: async (
            productId: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getFlexiblePersonalLeftQuota', 'productId', productId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/personalLeftQuota',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Flexible Product Position
         *
         * Weight: 150
         *
         * @summary Get Flexible Product Position(USER_DATA)
         * @param {string} [asset] USDC or USDT
         * @param {string} [productId]
         * @param {number} [current] Currently querying page. Starts from 1. Default: 1
         * @param {number} [size] Number of results per page. Default: 10, Max: 100
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getFlexibleProductPosition: async (
            asset?: string,
            productId?: string,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/position',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Flexible Redemption Record
         *
         *	The time between `startTime` and `endTime` cannot be longer than 3 months.
         *	If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         *	If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         *	If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get Flexible Redemption Record(USER_DATA)
         * @param {string} [productId]
         * @param {string} [redeemId]
         * @param {string} [asset] USDC or USDT
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Starts from 1. Default: 1
         * @param {number} [size] Number of results per page. Default: 10, Max: 100
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getFlexibleRedemptionRecord: async (
            productId?: string,
            redeemId?: string,
            asset?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (redeemId !== undefined && redeemId !== null) {
                localVarQueryParameter['redeemId'] = redeemId;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/history/redemptionRecord',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Flexible Rewards History
         *
         *	The time between `startTime` and `endTime` cannot be longer than 3 months.
         *	If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         *	If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         *	If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get Flexible Rewards History(USER_DATA)
         * @param {string} type FAST or STANDARD, defaults to STANDARD
         * @param {string} [productId]
         * @param {string} [asset] USDC or USDT
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Starts from 1. Default: 1
         * @param {number} [size] Number of results per page. Default: 10, Max: 100
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getFlexibleRewardsHistory: async (
            type: string,
            productId?: string,
            asset?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getFlexibleRewardsHistory', 'type', type);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (type !== undefined && type !== null) {
                localVarQueryParameter['type'] = type;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/history/rewardsRecord',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Flexible Subscription Preview
         *
         * Weight: 150
         *
         * @summary Get Flexible Subscription Preview(USER_DATA)
         * @param {string} productId
         * @param {number} amount Amount
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getFlexibleSubscriptionPreview: async (
            productId: string,
            amount: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getFlexibleSubscriptionPreview', 'productId', productId);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('getFlexibleSubscriptionPreview', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/subscriptionPreview',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Flexible Subscription Record
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get Flexible Subscription Record(USER_DATA)
         * @param {string} [productId]
         * @param {string} [purchaseId]
         * @param {string} [asset] USDC or USDT
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Starts from 1. Default: 1
         * @param {number} [size] Number of results per page. Default: 10, Max: 100
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getFlexibleSubscriptionRecord: async (
            productId?: string,
            purchaseId?: string,
            asset?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (purchaseId !== undefined && purchaseId !== null) {
                localVarQueryParameter['purchaseId'] = purchaseId;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/history/subscriptionRecord',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Locked Personal Left Quota
         *
         * Weight: 150
         *
         * @summary Get Locked Personal Left Quota(USER_DATA)
         * @param {string} projectId
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getLockedPersonalLeftQuota: async (
            projectId: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getLockedPersonalLeftQuota', 'projectId', projectId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (projectId !== undefined && projectId !== null) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/personalLeftQuota',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Locked Product Position
         *
         * Weight: 150
         *
         * @summary Get Locked Product Position
         * @param {string} [asset] USDC or USDT
         * @param {number} [positionId]
         * @param {string} [projectId]
         * @param {number} [current] Currently querying page. Starts from 1. Default: 1
         * @param {number} [size] Number of results per page. Default: 10, Max: 100
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getLockedProductPosition: async (
            asset?: string,
            positionId?: number,
            projectId?: string,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (positionId !== undefined && positionId !== null) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (projectId !== undefined && projectId !== null) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/position',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Locked Redemption Record
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get Locked Redemption Record(USER_DATA)
         * @param {number} [positionId]
         * @param {string} [redeemId]
         * @param {string} [asset] USDC or USDT
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Starts from 1. Default: 1
         * @param {number} [size] Number of results per page. Default: 10, Max: 100
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getLockedRedemptionRecord: async (
            positionId?: number,
            redeemId?: string,
            asset?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (positionId !== undefined && positionId !== null) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (redeemId !== undefined && redeemId !== null) {
                localVarQueryParameter['redeemId'] = redeemId;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/history/redemptionRecord',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Locked Rewards History
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get Locked Rewards History(USER_DATA)
         * @param {number} [positionId]
         * @param {string} [asset] USDC or USDT
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Starts from 1. Default: 1
         * @param {number} [size] Number of results per page. Default: 10, Max: 100
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getLockedRewardsHistory: async (
            positionId?: number,
            asset?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (positionId !== undefined && positionId !== null) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/history/rewardsRecord',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Locked Subscription Preview
         *
         * Weight: 150
         *
         * @summary Get Locked Subscription Preview(USER_DATA)
         * @param {string} projectId
         * @param {number} amount Amount
         * @param {boolean} [autoSubscribe] true or false, default true.
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getLockedSubscriptionPreview: async (
            projectId: string,
            amount: number,
            autoSubscribe?: boolean,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getLockedSubscriptionPreview', 'projectId', projectId);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('getLockedSubscriptionPreview', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (projectId !== undefined && projectId !== null) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (autoSubscribe !== undefined && autoSubscribe !== null) {
                localVarQueryParameter['autoSubscribe'] = autoSubscribe;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/subscriptionPreview',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Locked Subscription Record
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get Locked Subscription Record(USER_DATA)
         * @param {string} [purchaseId]
         * @param {string} [asset] USDC or USDT
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Starts from 1. Default: 1
         * @param {number} [size] Number of results per page. Default: 10, Max: 100
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getLockedSubscriptionRecord: async (
            purchaseId?: string,
            asset?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (purchaseId !== undefined && purchaseId !== null) {
                localVarQueryParameter['purchaseId'] = purchaseId;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/history/subscriptionRecord',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Rate History
         *
         * The time between startTime and endTime cannot be longer than 1 year.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get Rate History(USER_DATA)
         * @param {string} productId
         * @param {string} [aprPeriod] "DAY","YEAR",default"DAY"
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Starts from 1. Default: 1
         * @param {number} [size] Number of results per page. Default: 10, Max: 100
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getRateHistory: async (
            productId: string,
            aprPeriod?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getRateHistory', 'productId', productId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (aprPeriod !== undefined && aprPeriod !== null) {
                localVarQueryParameter['aprPeriod'] = aprPeriod;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/history/rateHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get available Simple Earn flexible product list
         *
         * Weight: 150
         *
         * @summary Get Simple Earn Flexible Product List(USER_DATA)
         * @param {string} [asset] USDC or USDT
         * @param {number} [current] Currently querying page. Starts from 1. Default: 1
         * @param {number} [size] Number of results per page. Default: 10, Max: 100
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getSimpleEarnFlexibleProductList: async (
            asset?: string,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Simple Earn Locked Product List
         *
         * Get available Simple Earn locked product list
         *
         * Weight: 150
         *
         * @summary Get Simple Earn Locked Product List(USER_DATA)
         * @param {string} [asset] USDC or USDT
         * @param {number} [current] Currently querying page. Starts from 1. Default: 1
         * @param {number} [size] Number of results per page. Default: 10, Max: 100
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        getSimpleEarnLockedProductList: async (
            asset?: string,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Redeem Flexible Product
         *
         * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
         *
         * Weight: 1
         *
         * @summary Redeem Flexible Product(TRADE)
         * @param {string} productId
         * @param {boolean} [redeemAll] true or false, default to false
         * @param {number} [amount] if redeemAll is false, amount is mandatory
         * @param {string} [destAccount] `SPOT`,`FUND`, default `SPOT`
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        redeemFlexibleProduct: async (
            productId: string,
            redeemAll?: boolean,
            amount?: number,
            destAccount?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('redeemFlexibleProduct', 'productId', productId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (redeemAll !== undefined && redeemAll !== null) {
                localVarQueryParameter['redeemAll'] = redeemAll;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (destAccount !== undefined && destAccount !== null) {
                localVarQueryParameter['destAccount'] = destAccount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/redeem',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Redeem Locked Product
         *
         * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
         *
         * Weight: 1/3s per account
         *
         * @summary Redeem Locked Product(TRADE)
         * @param {string} positionId
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        redeemLockedProduct: async (
            positionId: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('redeemLockedProduct', 'positionId', positionId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (positionId !== undefined && positionId !== null) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/redeem',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Set Flexible Auto Subscribe
         *
         * Weight: 150
         *
         * @summary Set Flexible Auto Subscribe(USER_DATA)
         * @param {string} productId
         * @param {boolean} autoSubscribe true or false
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        setFlexibleAutoSubscribe: async (
            productId: string,
            autoSubscribe: boolean,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('setFlexibleAutoSubscribe', 'productId', productId);
            // verify required parameter 'autoSubscribe' is not null or undefined
            assertParamExists('setFlexibleAutoSubscribe', 'autoSubscribe', autoSubscribe);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (autoSubscribe !== undefined && autoSubscribe !== null) {
                localVarQueryParameter['autoSubscribe'] = autoSubscribe;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/setAutoSubscribe',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Set locked auto subscribe
         *
         * Weight: 150
         *
         * @summary Set Locked Auto Subscribe(USER_DATA)
         * @param {string} positionId
         * @param {boolean} autoSubscribe true or false
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        setLockedAutoSubscribe: async (
            positionId: string,
            autoSubscribe: boolean,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('setLockedAutoSubscribe', 'positionId', positionId);
            // verify required parameter 'autoSubscribe' is not null or undefined
            assertParamExists('setLockedAutoSubscribe', 'autoSubscribe', autoSubscribe);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (positionId !== undefined && positionId !== null) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (autoSubscribe !== undefined && autoSubscribe !== null) {
                localVarQueryParameter['autoSubscribe'] = autoSubscribe;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/setAutoSubscribe',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Set redeem option for Locked product
         *
         * Weight: 50
         *
         * @summary Set Locked Product Redeem Option(USER_DATA)
         * @param {string} positionId
         * @param {string} redeemTo `SPOT`,'FLEXIBLE'
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        setLockedProductRedeemOption: async (
            positionId: string,
            redeemTo: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('setLockedProductRedeemOption', 'positionId', positionId);
            // verify required parameter 'redeemTo' is not null or undefined
            assertParamExists('setLockedProductRedeemOption', 'redeemTo', redeemTo);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (positionId !== undefined && positionId !== null) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (redeemTo !== undefined && redeemTo !== null) {
                localVarQueryParameter['redeemTo'] = redeemTo;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/setRedeemOption',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Simple Account query
         *
         * Weight: 150
         *
         * @summary Simple Account(USER_DATA)
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        simpleAccount: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/account',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Subscribe Flexible Product
         *
         * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
         *
         * Weight: 1
         *
         * @summary Subscribe Flexible Product(TRADE)
         * @param {string} productId
         * @param {number} amount Amount
         * @param {boolean} [autoSubscribe] true or false, default true.
         * @param {string} [sourceAccount] `SPOT`,`FUND`,`ALL`, default `SPOT`
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        subscribeFlexibleProduct: async (
            productId: string,
            amount: number,
            autoSubscribe?: boolean,
            sourceAccount?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('subscribeFlexibleProduct', 'productId', productId);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subscribeFlexibleProduct', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (autoSubscribe !== undefined && autoSubscribe !== null) {
                localVarQueryParameter['autoSubscribe'] = autoSubscribe;
            }

            if (sourceAccount !== undefined && sourceAccount !== null) {
                localVarQueryParameter['sourceAccount'] = sourceAccount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/subscribe',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Subscribe Locked Product
         *
         * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
         *
         * Weight: 1
         *
         * @summary Subscribe Locked Product(TRADE)
         * @param {string} projectId
         * @param {number} amount Amount
         * @param {boolean} [autoSubscribe] true or false, default true.
         * @param {string} [sourceAccount] `SPOT`,`FUND`,`ALL`, default `SPOT`
         * @param {string} [redeemTo] `SPOT`,`FLEXIBLE`, default `FLEXIBLE`
         * @param {number} [recvWindow] The value cannot be greater than 60000 (ms)
         *
         * @throws {RequiredError}
         */
        subscribeLockedProduct: async (
            projectId: string,
            amount: number,
            autoSubscribe?: boolean,
            sourceAccount?: string,
            redeemTo?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('subscribeLockedProduct', 'projectId', projectId);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subscribeLockedProduct', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (projectId !== undefined && projectId !== null) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (autoSubscribe !== undefined && autoSubscribe !== null) {
                localVarQueryParameter['autoSubscribe'] = autoSubscribe;
            }

            if (sourceAccount !== undefined && sourceAccount !== null) {
                localVarQueryParameter['sourceAccount'] = sourceAccount;
            }

            if (redeemTo !== undefined && redeemTo !== null) {
                localVarQueryParameter['redeemTo'] = redeemTo;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/subscribe',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * FlexibleLockedApi - interface
 * @interface FlexibleLockedApi
 */
export interface FlexibleLockedApiInterface {
    /**
     * Get Collateral Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 30 days.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 1
     *
     * @summary Get Collateral Record(USER_DATA)
     * @param {GetCollateralRecordRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    getCollateralRecord(
        requestParameters?: GetCollateralRecordRequest
    ): Promise<RestApiResponse<GetCollateralRecordResponse>>;
    /**
     * Get Flexible Personal Left Quota
     *
     * Weight: 150
     *
     * @summary Get Flexible Personal Left Quota(USER_DATA)
     * @param {GetFlexiblePersonalLeftQuotaRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    getFlexiblePersonalLeftQuota(
        requestParameters: GetFlexiblePersonalLeftQuotaRequest
    ): Promise<RestApiResponse<GetFlexiblePersonalLeftQuotaResponse>>;
    /**
     * Get Flexible Product Position
     *
     * Weight: 150
     *
     * @summary Get Flexible Product Position(USER_DATA)
     * @param {GetFlexibleProductPositionRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    getFlexibleProductPosition(
        requestParameters?: GetFlexibleProductPositionRequest
    ): Promise<RestApiResponse<GetFlexibleProductPositionResponse>>;
    /**
     * Get Flexible Redemption Record
     *
     *	The time between `startTime` and `endTime` cannot be longer than 3 months.
     *	If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     *	If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     *	If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Flexible Redemption Record(USER_DATA)
     * @param {GetFlexibleRedemptionRecordRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    getFlexibleRedemptionRecord(
        requestParameters?: GetFlexibleRedemptionRecordRequest
    ): Promise<RestApiResponse<GetFlexibleRedemptionRecordResponse>>;
    /**
     * Get Flexible Rewards History
     *
     *	The time between `startTime` and `endTime` cannot be longer than 3 months.
     *	If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     *	If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     *	If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Flexible Rewards History(USER_DATA)
     * @param {GetFlexibleRewardsHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    getFlexibleRewardsHistory(
        requestParameters: GetFlexibleRewardsHistoryRequest
    ): Promise<RestApiResponse<GetFlexibleRewardsHistoryResponse>>;
    /**
     * Get Flexible Subscription Preview
     *
     * Weight: 150
     *
     * @summary Get Flexible Subscription Preview(USER_DATA)
     * @param {GetFlexibleSubscriptionPreviewRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    getFlexibleSubscriptionPreview(
        requestParameters: GetFlexibleSubscriptionPreviewRequest
    ): Promise<RestApiResponse<GetFlexibleSubscriptionPreviewResponse>>;
    /**
     * Get Flexible Subscription Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Flexible Subscription Record(USER_DATA)
     * @param {GetFlexibleSubscriptionRecordRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    getFlexibleSubscriptionRecord(
        requestParameters?: GetFlexibleSubscriptionRecordRequest
    ): Promise<RestApiResponse<GetFlexibleSubscriptionRecordResponse>>;
    /**
     * Get Locked Personal Left Quota
     *
     * Weight: 150
     *
     * @summary Get Locked Personal Left Quota(USER_DATA)
     * @param {GetLockedPersonalLeftQuotaRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    getLockedPersonalLeftQuota(
        requestParameters: GetLockedPersonalLeftQuotaRequest
    ): Promise<RestApiResponse<GetLockedPersonalLeftQuotaResponse>>;
    /**
     * Get Locked Product Position
     *
     * Weight: 150
     *
     * @summary Get Locked Product Position
     * @param {GetLockedProductPositionRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    getLockedProductPosition(
        requestParameters?: GetLockedProductPositionRequest
    ): Promise<RestApiResponse<GetLockedProductPositionResponse>>;
    /**
     * Get Locked Redemption Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Locked Redemption Record(USER_DATA)
     * @param {GetLockedRedemptionRecordRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    getLockedRedemptionRecord(
        requestParameters?: GetLockedRedemptionRecordRequest
    ): Promise<RestApiResponse<GetLockedRedemptionRecordResponse>>;
    /**
     * Get Locked Rewards History
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Locked Rewards History(USER_DATA)
     * @param {GetLockedRewardsHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    getLockedRewardsHistory(
        requestParameters?: GetLockedRewardsHistoryRequest
    ): Promise<RestApiResponse<GetLockedRewardsHistoryResponse>>;
    /**
     * Get Locked Subscription Preview
     *
     * Weight: 150
     *
     * @summary Get Locked Subscription Preview(USER_DATA)
     * @param {GetLockedSubscriptionPreviewRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    getLockedSubscriptionPreview(
        requestParameters: GetLockedSubscriptionPreviewRequest
    ): Promise<RestApiResponse<GetLockedSubscriptionPreviewResponse>>;
    /**
     * Get Locked Subscription Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Locked Subscription Record(USER_DATA)
     * @param {GetLockedSubscriptionRecordRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    getLockedSubscriptionRecord(
        requestParameters?: GetLockedSubscriptionRecordRequest
    ): Promise<RestApiResponse<GetLockedSubscriptionRecordResponse>>;
    /**
     * Get Rate History
     *
     * The time between startTime and endTime cannot be longer than 1 year.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Rate History(USER_DATA)
     * @param {GetRateHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    getRateHistory(
        requestParameters: GetRateHistoryRequest
    ): Promise<RestApiResponse<GetRateHistoryResponse>>;
    /**
     * Get available Simple Earn flexible product list
     *
     * Weight: 150
     *
     * @summary Get Simple Earn Flexible Product List(USER_DATA)
     * @param {GetSimpleEarnFlexibleProductListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    getSimpleEarnFlexibleProductList(
        requestParameters?: GetSimpleEarnFlexibleProductListRequest
    ): Promise<RestApiResponse<GetSimpleEarnFlexibleProductListResponse>>;
    /**
     * Get Simple Earn Locked Product List
     *
     * Get available Simple Earn locked product list
     *
     * Weight: 150
     *
     * @summary Get Simple Earn Locked Product List(USER_DATA)
     * @param {GetSimpleEarnLockedProductListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    getSimpleEarnLockedProductList(
        requestParameters?: GetSimpleEarnLockedProductListRequest
    ): Promise<RestApiResponse<GetSimpleEarnLockedProductListResponse>>;
    /**
     * Redeem Flexible Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Redeem Flexible Product(TRADE)
     * @param {RedeemFlexibleProductRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    redeemFlexibleProduct(
        requestParameters: RedeemFlexibleProductRequest
    ): Promise<RestApiResponse<RedeemFlexibleProductResponse>>;
    /**
     * Redeem Locked Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1/3s per account
     *
     * @summary Redeem Locked Product(TRADE)
     * @param {RedeemLockedProductRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    redeemLockedProduct(
        requestParameters: RedeemLockedProductRequest
    ): Promise<RestApiResponse<RedeemLockedProductResponse>>;
    /**
     * Set Flexible Auto Subscribe
     *
     * Weight: 150
     *
     * @summary Set Flexible Auto Subscribe(USER_DATA)
     * @param {SetFlexibleAutoSubscribeRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    setFlexibleAutoSubscribe(
        requestParameters: SetFlexibleAutoSubscribeRequest
    ): Promise<RestApiResponse<SetFlexibleAutoSubscribeResponse>>;
    /**
     * Set locked auto subscribe
     *
     * Weight: 150
     *
     * @summary Set Locked Auto Subscribe(USER_DATA)
     * @param {SetLockedAutoSubscribeRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    setLockedAutoSubscribe(
        requestParameters: SetLockedAutoSubscribeRequest
    ): Promise<RestApiResponse<SetLockedAutoSubscribeResponse>>;
    /**
     * Set redeem option for Locked product
     *
     * Weight: 50
     *
     * @summary Set Locked Product Redeem Option(USER_DATA)
     * @param {SetLockedProductRedeemOptionRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    setLockedProductRedeemOption(
        requestParameters: SetLockedProductRedeemOptionRequest
    ): Promise<RestApiResponse<SetLockedProductRedeemOptionResponse>>;
    /**
     * Simple Account query
     *
     * Weight: 150
     *
     * @summary Simple Account(USER_DATA)
     * @param {SimpleAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    simpleAccount(
        requestParameters?: SimpleAccountRequest
    ): Promise<RestApiResponse<SimpleAccountResponse>>;
    /**
     * Subscribe Flexible Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Subscribe Flexible Product(TRADE)
     * @param {SubscribeFlexibleProductRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    subscribeFlexibleProduct(
        requestParameters: SubscribeFlexibleProductRequest
    ): Promise<RestApiResponse<SubscribeFlexibleProductResponse>>;
    /**
     * Subscribe Locked Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Subscribe Locked Product(TRADE)
     * @param {SubscribeLockedProductRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApiInterface
     */
    subscribeLockedProduct(
        requestParameters: SubscribeLockedProductRequest
    ): Promise<RestApiResponse<SubscribeLockedProductResponse>>;
}

/**
 * Request parameters for getCollateralRecord operation in FlexibleLockedApi.
 * @interface GetCollateralRecordRequest
 */
export interface GetCollateralRecordRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiGetCollateralRecord
     */
    readonly productId?: string;

    /**
     *
     * @type {number}
     * @memberof FlexibleLockedApiGetCollateralRecord
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof FlexibleLockedApiGetCollateralRecord
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Starts from 1. Default: 1
     * @type {number}
     * @memberof FlexibleLockedApiGetCollateralRecord
     */
    readonly current?: number;

    /**
     * Number of results per page. Default: 10, Max: 100
     * @type {number}
     * @memberof FlexibleLockedApiGetCollateralRecord
     */
    readonly size?: number;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiGetCollateralRecord
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFlexiblePersonalLeftQuota operation in FlexibleLockedApi.
 * @interface GetFlexiblePersonalLeftQuotaRequest
 */
export interface GetFlexiblePersonalLeftQuotaRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiGetFlexiblePersonalLeftQuota
     */
    readonly productId: string;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexiblePersonalLeftQuota
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFlexibleProductPosition operation in FlexibleLockedApi.
 * @interface GetFlexibleProductPositionRequest
 */
export interface GetFlexibleProductPositionRequest {
    /**
     * USDC or USDT
     * @type {string}
     * @memberof FlexibleLockedApiGetFlexibleProductPosition
     */
    readonly asset?: string;

    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiGetFlexibleProductPosition
     */
    readonly productId?: string;

    /**
     * Currently querying page. Starts from 1. Default: 1
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleProductPosition
     */
    readonly current?: number;

    /**
     * Number of results per page. Default: 10, Max: 100
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleProductPosition
     */
    readonly size?: number;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleProductPosition
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFlexibleRedemptionRecord operation in FlexibleLockedApi.
 * @interface GetFlexibleRedemptionRecordRequest
 */
export interface GetFlexibleRedemptionRecordRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiGetFlexibleRedemptionRecord
     */
    readonly productId?: string;

    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiGetFlexibleRedemptionRecord
     */
    readonly redeemId?: string;

    /**
     * USDC or USDT
     * @type {string}
     * @memberof FlexibleLockedApiGetFlexibleRedemptionRecord
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleRedemptionRecord
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleRedemptionRecord
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Starts from 1. Default: 1
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleRedemptionRecord
     */
    readonly current?: number;

    /**
     * Number of results per page. Default: 10, Max: 100
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleRedemptionRecord
     */
    readonly size?: number;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleRedemptionRecord
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFlexibleRewardsHistory operation in FlexibleLockedApi.
 * @interface GetFlexibleRewardsHistoryRequest
 */
export interface GetFlexibleRewardsHistoryRequest {
    /**
     * FAST or STANDARD, defaults to STANDARD
     * @type {string}
     * @memberof FlexibleLockedApiGetFlexibleRewardsHistory
     */
    readonly type: string;

    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiGetFlexibleRewardsHistory
     */
    readonly productId?: string;

    /**
     * USDC or USDT
     * @type {string}
     * @memberof FlexibleLockedApiGetFlexibleRewardsHistory
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleRewardsHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleRewardsHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Starts from 1. Default: 1
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleRewardsHistory
     */
    readonly current?: number;

    /**
     * Number of results per page. Default: 10, Max: 100
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleRewardsHistory
     */
    readonly size?: number;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleRewardsHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFlexibleSubscriptionPreview operation in FlexibleLockedApi.
 * @interface GetFlexibleSubscriptionPreviewRequest
 */
export interface GetFlexibleSubscriptionPreviewRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiGetFlexibleSubscriptionPreview
     */
    readonly productId: string;

    /**
     * Amount
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleSubscriptionPreview
     */
    readonly amount: number;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleSubscriptionPreview
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFlexibleSubscriptionRecord operation in FlexibleLockedApi.
 * @interface GetFlexibleSubscriptionRecordRequest
 */
export interface GetFlexibleSubscriptionRecordRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiGetFlexibleSubscriptionRecord
     */
    readonly productId?: string;

    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiGetFlexibleSubscriptionRecord
     */
    readonly purchaseId?: string;

    /**
     * USDC or USDT
     * @type {string}
     * @memberof FlexibleLockedApiGetFlexibleSubscriptionRecord
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleSubscriptionRecord
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleSubscriptionRecord
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Starts from 1. Default: 1
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleSubscriptionRecord
     */
    readonly current?: number;

    /**
     * Number of results per page. Default: 10, Max: 100
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleSubscriptionRecord
     */
    readonly size?: number;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiGetFlexibleSubscriptionRecord
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getLockedPersonalLeftQuota operation in FlexibleLockedApi.
 * @interface GetLockedPersonalLeftQuotaRequest
 */
export interface GetLockedPersonalLeftQuotaRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiGetLockedPersonalLeftQuota
     */
    readonly projectId: string;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedPersonalLeftQuota
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getLockedProductPosition operation in FlexibleLockedApi.
 * @interface GetLockedProductPositionRequest
 */
export interface GetLockedProductPositionRequest {
    /**
     * USDC or USDT
     * @type {string}
     * @memberof FlexibleLockedApiGetLockedProductPosition
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedProductPosition
     */
    readonly positionId?: number;

    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiGetLockedProductPosition
     */
    readonly projectId?: string;

    /**
     * Currently querying page. Starts from 1. Default: 1
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedProductPosition
     */
    readonly current?: number;

    /**
     * Number of results per page. Default: 10, Max: 100
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedProductPosition
     */
    readonly size?: number;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedProductPosition
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getLockedRedemptionRecord operation in FlexibleLockedApi.
 * @interface GetLockedRedemptionRecordRequest
 */
export interface GetLockedRedemptionRecordRequest {
    /**
     *
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedRedemptionRecord
     */
    readonly positionId?: number;

    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiGetLockedRedemptionRecord
     */
    readonly redeemId?: string;

    /**
     * USDC or USDT
     * @type {string}
     * @memberof FlexibleLockedApiGetLockedRedemptionRecord
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedRedemptionRecord
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedRedemptionRecord
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Starts from 1. Default: 1
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedRedemptionRecord
     */
    readonly current?: number;

    /**
     * Number of results per page. Default: 10, Max: 100
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedRedemptionRecord
     */
    readonly size?: number;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedRedemptionRecord
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getLockedRewardsHistory operation in FlexibleLockedApi.
 * @interface GetLockedRewardsHistoryRequest
 */
export interface GetLockedRewardsHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedRewardsHistory
     */
    readonly positionId?: number;

    /**
     * USDC or USDT
     * @type {string}
     * @memberof FlexibleLockedApiGetLockedRewardsHistory
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedRewardsHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedRewardsHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Starts from 1. Default: 1
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedRewardsHistory
     */
    readonly current?: number;

    /**
     * Number of results per page. Default: 10, Max: 100
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedRewardsHistory
     */
    readonly size?: number;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedRewardsHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getLockedSubscriptionPreview operation in FlexibleLockedApi.
 * @interface GetLockedSubscriptionPreviewRequest
 */
export interface GetLockedSubscriptionPreviewRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiGetLockedSubscriptionPreview
     */
    readonly projectId: string;

    /**
     * Amount
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedSubscriptionPreview
     */
    readonly amount: number;

    /**
     * true or false, default true.
     * @type {boolean}
     * @memberof FlexibleLockedApiGetLockedSubscriptionPreview
     */
    readonly autoSubscribe?: boolean;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedSubscriptionPreview
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getLockedSubscriptionRecord operation in FlexibleLockedApi.
 * @interface GetLockedSubscriptionRecordRequest
 */
export interface GetLockedSubscriptionRecordRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiGetLockedSubscriptionRecord
     */
    readonly purchaseId?: string;

    /**
     * USDC or USDT
     * @type {string}
     * @memberof FlexibleLockedApiGetLockedSubscriptionRecord
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedSubscriptionRecord
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedSubscriptionRecord
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Starts from 1. Default: 1
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedSubscriptionRecord
     */
    readonly current?: number;

    /**
     * Number of results per page. Default: 10, Max: 100
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedSubscriptionRecord
     */
    readonly size?: number;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiGetLockedSubscriptionRecord
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getRateHistory operation in FlexibleLockedApi.
 * @interface GetRateHistoryRequest
 */
export interface GetRateHistoryRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiGetRateHistory
     */
    readonly productId: string;

    /**
     * "DAY","YEAR",default"DAY"
     * @type {string}
     * @memberof FlexibleLockedApiGetRateHistory
     */
    readonly aprPeriod?: string;

    /**
     *
     * @type {number}
     * @memberof FlexibleLockedApiGetRateHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof FlexibleLockedApiGetRateHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Starts from 1. Default: 1
     * @type {number}
     * @memberof FlexibleLockedApiGetRateHistory
     */
    readonly current?: number;

    /**
     * Number of results per page. Default: 10, Max: 100
     * @type {number}
     * @memberof FlexibleLockedApiGetRateHistory
     */
    readonly size?: number;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiGetRateHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getSimpleEarnFlexibleProductList operation in FlexibleLockedApi.
 * @interface GetSimpleEarnFlexibleProductListRequest
 */
export interface GetSimpleEarnFlexibleProductListRequest {
    /**
     * USDC or USDT
     * @type {string}
     * @memberof FlexibleLockedApiGetSimpleEarnFlexibleProductList
     */
    readonly asset?: string;

    /**
     * Currently querying page. Starts from 1. Default: 1
     * @type {number}
     * @memberof FlexibleLockedApiGetSimpleEarnFlexibleProductList
     */
    readonly current?: number;

    /**
     * Number of results per page. Default: 10, Max: 100
     * @type {number}
     * @memberof FlexibleLockedApiGetSimpleEarnFlexibleProductList
     */
    readonly size?: number;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiGetSimpleEarnFlexibleProductList
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getSimpleEarnLockedProductList operation in FlexibleLockedApi.
 * @interface GetSimpleEarnLockedProductListRequest
 */
export interface GetSimpleEarnLockedProductListRequest {
    /**
     * USDC or USDT
     * @type {string}
     * @memberof FlexibleLockedApiGetSimpleEarnLockedProductList
     */
    readonly asset?: string;

    /**
     * Currently querying page. Starts from 1. Default: 1
     * @type {number}
     * @memberof FlexibleLockedApiGetSimpleEarnLockedProductList
     */
    readonly current?: number;

    /**
     * Number of results per page. Default: 10, Max: 100
     * @type {number}
     * @memberof FlexibleLockedApiGetSimpleEarnLockedProductList
     */
    readonly size?: number;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiGetSimpleEarnLockedProductList
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for redeemFlexibleProduct operation in FlexibleLockedApi.
 * @interface RedeemFlexibleProductRequest
 */
export interface RedeemFlexibleProductRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiRedeemFlexibleProduct
     */
    readonly productId: string;

    /**
     * true or false, default to false
     * @type {boolean}
     * @memberof FlexibleLockedApiRedeemFlexibleProduct
     */
    readonly redeemAll?: boolean;

    /**
     * if redeemAll is false, amount is mandatory
     * @type {number}
     * @memberof FlexibleLockedApiRedeemFlexibleProduct
     */
    readonly amount?: number;

    /**
     * `SPOT`,`FUND`, default `SPOT`
     * @type {string}
     * @memberof FlexibleLockedApiRedeemFlexibleProduct
     */
    readonly destAccount?: string;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiRedeemFlexibleProduct
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for redeemLockedProduct operation in FlexibleLockedApi.
 * @interface RedeemLockedProductRequest
 */
export interface RedeemLockedProductRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiRedeemLockedProduct
     */
    readonly positionId: string;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiRedeemLockedProduct
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for setFlexibleAutoSubscribe operation in FlexibleLockedApi.
 * @interface SetFlexibleAutoSubscribeRequest
 */
export interface SetFlexibleAutoSubscribeRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiSetFlexibleAutoSubscribe
     */
    readonly productId: string;

    /**
     * true or false
     * @type {boolean}
     * @memberof FlexibleLockedApiSetFlexibleAutoSubscribe
     */
    readonly autoSubscribe: boolean;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiSetFlexibleAutoSubscribe
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for setLockedAutoSubscribe operation in FlexibleLockedApi.
 * @interface SetLockedAutoSubscribeRequest
 */
export interface SetLockedAutoSubscribeRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiSetLockedAutoSubscribe
     */
    readonly positionId: string;

    /**
     * true or false
     * @type {boolean}
     * @memberof FlexibleLockedApiSetLockedAutoSubscribe
     */
    readonly autoSubscribe: boolean;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiSetLockedAutoSubscribe
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for setLockedProductRedeemOption operation in FlexibleLockedApi.
 * @interface SetLockedProductRedeemOptionRequest
 */
export interface SetLockedProductRedeemOptionRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiSetLockedProductRedeemOption
     */
    readonly positionId: string;

    /**
     * `SPOT`,'FLEXIBLE'
     * @type {string}
     * @memberof FlexibleLockedApiSetLockedProductRedeemOption
     */
    readonly redeemTo: string;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiSetLockedProductRedeemOption
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for simpleAccount operation in FlexibleLockedApi.
 * @interface SimpleAccountRequest
 */
export interface SimpleAccountRequest {
    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiSimpleAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for subscribeFlexibleProduct operation in FlexibleLockedApi.
 * @interface SubscribeFlexibleProductRequest
 */
export interface SubscribeFlexibleProductRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiSubscribeFlexibleProduct
     */
    readonly productId: string;

    /**
     * Amount
     * @type {number}
     * @memberof FlexibleLockedApiSubscribeFlexibleProduct
     */
    readonly amount: number;

    /**
     * true or false, default true.
     * @type {boolean}
     * @memberof FlexibleLockedApiSubscribeFlexibleProduct
     */
    readonly autoSubscribe?: boolean;

    /**
     * `SPOT`,`FUND`,`ALL`, default `SPOT`
     * @type {string}
     * @memberof FlexibleLockedApiSubscribeFlexibleProduct
     */
    readonly sourceAccount?: string;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiSubscribeFlexibleProduct
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for subscribeLockedProduct operation in FlexibleLockedApi.
 * @interface SubscribeLockedProductRequest
 */
export interface SubscribeLockedProductRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleLockedApiSubscribeLockedProduct
     */
    readonly projectId: string;

    /**
     * Amount
     * @type {number}
     * @memberof FlexibleLockedApiSubscribeLockedProduct
     */
    readonly amount: number;

    /**
     * true or false, default true.
     * @type {boolean}
     * @memberof FlexibleLockedApiSubscribeLockedProduct
     */
    readonly autoSubscribe?: boolean;

    /**
     * `SPOT`,`FUND`,`ALL`, default `SPOT`
     * @type {string}
     * @memberof FlexibleLockedApiSubscribeLockedProduct
     */
    readonly sourceAccount?: string;

    /**
     * `SPOT`,`FLEXIBLE`, default `FLEXIBLE`
     * @type {string}
     * @memberof FlexibleLockedApiSubscribeLockedProduct
     */
    readonly redeemTo?: string;

    /**
     * The value cannot be greater than 60000 (ms)
     * @type {number}
     * @memberof FlexibleLockedApiSubscribeLockedProduct
     */
    readonly recvWindow?: number;
}

/**
 * FlexibleLockedApi - object-oriented interface
 * @class FlexibleLockedApi
 */
export class FlexibleLockedApi implements FlexibleLockedApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = FlexibleLockedApiAxiosParamCreator(configuration);
    }

    /**
     * Get Collateral Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 30 days.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 1
     *
     * @summary Get Collateral Record(USER_DATA)
     * @param {GetCollateralRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetCollateralRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/history/Get-Collateral-Record Binance API Documentation}
     */
    public async getCollateralRecord(
        requestParameters: GetCollateralRecordRequest = {}
    ): Promise<RestApiResponse<GetCollateralRecordResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getCollateralRecord(
            requestParameters?.productId,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetCollateralRecordResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Flexible Personal Left Quota
     *
     * Weight: 150
     *
     * @summary Get Flexible Personal Left Quota(USER_DATA)
     * @param {GetFlexiblePersonalLeftQuotaRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexiblePersonalLeftQuotaResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/account/Get-Flexible-Personal-Left-Quota Binance API Documentation}
     */
    public async getFlexiblePersonalLeftQuota(
        requestParameters: GetFlexiblePersonalLeftQuotaRequest
    ): Promise<RestApiResponse<GetFlexiblePersonalLeftQuotaResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getFlexiblePersonalLeftQuota(
            requestParameters?.productId,
            requestParameters?.recvWindow
        );
        return sendRequest<GetFlexiblePersonalLeftQuotaResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Flexible Product Position
     *
     * Weight: 150
     *
     * @summary Get Flexible Product Position(USER_DATA)
     * @param {GetFlexibleProductPositionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleProductPositionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/account/Get-Flexible-Product-Position Binance API Documentation}
     */
    public async getFlexibleProductPosition(
        requestParameters: GetFlexibleProductPositionRequest = {}
    ): Promise<RestApiResponse<GetFlexibleProductPositionResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getFlexibleProductPosition(
            requestParameters?.asset,
            requestParameters?.productId,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetFlexibleProductPositionResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Flexible Redemption Record
     *
     *	The time between `startTime` and `endTime` cannot be longer than 3 months.
     *	If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     *	If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     *	If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Flexible Redemption Record(USER_DATA)
     * @param {GetFlexibleRedemptionRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleRedemptionRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/history/Get-Flexible-Redemption-Record Binance API Documentation}
     */
    public async getFlexibleRedemptionRecord(
        requestParameters: GetFlexibleRedemptionRecordRequest = {}
    ): Promise<RestApiResponse<GetFlexibleRedemptionRecordResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getFlexibleRedemptionRecord(
            requestParameters?.productId,
            requestParameters?.redeemId,
            requestParameters?.asset,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetFlexibleRedemptionRecordResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Flexible Rewards History
     *
     *	The time between `startTime` and `endTime` cannot be longer than 3 months.
     *	If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     *	If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     *	If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Flexible Rewards History(USER_DATA)
     * @param {GetFlexibleRewardsHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleRewardsHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/history/Get-Flexible-Rewards-History Binance API Documentation}
     */
    public async getFlexibleRewardsHistory(
        requestParameters: GetFlexibleRewardsHistoryRequest
    ): Promise<RestApiResponse<GetFlexibleRewardsHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getFlexibleRewardsHistory(
            requestParameters?.type,
            requestParameters?.productId,
            requestParameters?.asset,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetFlexibleRewardsHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Flexible Subscription Preview
     *
     * Weight: 150
     *
     * @summary Get Flexible Subscription Preview(USER_DATA)
     * @param {GetFlexibleSubscriptionPreviewRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleSubscriptionPreviewResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/earn/Get-Flexible-Subscription-Preview Binance API Documentation}
     */
    public async getFlexibleSubscriptionPreview(
        requestParameters: GetFlexibleSubscriptionPreviewRequest
    ): Promise<RestApiResponse<GetFlexibleSubscriptionPreviewResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getFlexibleSubscriptionPreview(
                requestParameters?.productId,
                requestParameters?.amount,
                requestParameters?.recvWindow
            );
        return sendRequest<GetFlexibleSubscriptionPreviewResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Flexible Subscription Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Flexible Subscription Record(USER_DATA)
     * @param {GetFlexibleSubscriptionRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleSubscriptionRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/history/Get-Flexible-Subscription-Record Binance API Documentation}
     */
    public async getFlexibleSubscriptionRecord(
        requestParameters: GetFlexibleSubscriptionRecordRequest = {}
    ): Promise<RestApiResponse<GetFlexibleSubscriptionRecordResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getFlexibleSubscriptionRecord(
                requestParameters?.productId,
                requestParameters?.purchaseId,
                requestParameters?.asset,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.current,
                requestParameters?.size,
                requestParameters?.recvWindow
            );
        return sendRequest<GetFlexibleSubscriptionRecordResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Locked Personal Left Quota
     *
     * Weight: 150
     *
     * @summary Get Locked Personal Left Quota(USER_DATA)
     * @param {GetLockedPersonalLeftQuotaRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLockedPersonalLeftQuotaResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/account/Get-Locked-Personal-Left-Quota Binance API Documentation}
     */
    public async getLockedPersonalLeftQuota(
        requestParameters: GetLockedPersonalLeftQuotaRequest
    ): Promise<RestApiResponse<GetLockedPersonalLeftQuotaResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getLockedPersonalLeftQuota(
            requestParameters?.projectId,
            requestParameters?.recvWindow
        );
        return sendRequest<GetLockedPersonalLeftQuotaResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Locked Product Position
     *
     * Weight: 150
     *
     * @summary Get Locked Product Position
     * @param {GetLockedProductPositionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLockedProductPositionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/account/Get-Locked-Product-Position Binance API Documentation}
     */
    public async getLockedProductPosition(
        requestParameters: GetLockedProductPositionRequest = {}
    ): Promise<RestApiResponse<GetLockedProductPositionResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getLockedProductPosition(
            requestParameters?.asset,
            requestParameters?.positionId,
            requestParameters?.projectId,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetLockedProductPositionResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Locked Redemption Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Locked Redemption Record(USER_DATA)
     * @param {GetLockedRedemptionRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLockedRedemptionRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/history/Get-Locked-Redemption-Record Binance API Documentation}
     */
    public async getLockedRedemptionRecord(
        requestParameters: GetLockedRedemptionRecordRequest = {}
    ): Promise<RestApiResponse<GetLockedRedemptionRecordResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getLockedRedemptionRecord(
            requestParameters?.positionId,
            requestParameters?.redeemId,
            requestParameters?.asset,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetLockedRedemptionRecordResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Locked Rewards History
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Locked Rewards History(USER_DATA)
     * @param {GetLockedRewardsHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLockedRewardsHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/history/Get-Locked-Rewards-History Binance API Documentation}
     */
    public async getLockedRewardsHistory(
        requestParameters: GetLockedRewardsHistoryRequest = {}
    ): Promise<RestApiResponse<GetLockedRewardsHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getLockedRewardsHistory(
            requestParameters?.positionId,
            requestParameters?.asset,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetLockedRewardsHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Locked Subscription Preview
     *
     * Weight: 150
     *
     * @summary Get Locked Subscription Preview(USER_DATA)
     * @param {GetLockedSubscriptionPreviewRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLockedSubscriptionPreviewResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/earn/Get-Locked-Subscription-Preview Binance API Documentation}
     */
    public async getLockedSubscriptionPreview(
        requestParameters: GetLockedSubscriptionPreviewRequest
    ): Promise<RestApiResponse<GetLockedSubscriptionPreviewResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getLockedSubscriptionPreview(
            requestParameters?.projectId,
            requestParameters?.amount,
            requestParameters?.autoSubscribe,
            requestParameters?.recvWindow
        );
        return sendRequest<GetLockedSubscriptionPreviewResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Locked Subscription Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Locked Subscription Record(USER_DATA)
     * @param {GetLockedSubscriptionRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLockedSubscriptionRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/history/Get-Locked-Subscription-Record Binance API Documentation}
     */
    public async getLockedSubscriptionRecord(
        requestParameters: GetLockedSubscriptionRecordRequest = {}
    ): Promise<RestApiResponse<GetLockedSubscriptionRecordResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getLockedSubscriptionRecord(
            requestParameters?.purchaseId,
            requestParameters?.asset,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetLockedSubscriptionRecordResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Rate History
     *
     * The time between startTime and endTime cannot be longer than 1 year.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Rate History(USER_DATA)
     * @param {GetRateHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetRateHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/history/Get-Rate-History Binance API Documentation}
     */
    public async getRateHistory(
        requestParameters: GetRateHistoryRequest
    ): Promise<RestApiResponse<GetRateHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getRateHistory(
            requestParameters?.productId,
            requestParameters?.aprPeriod,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetRateHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get available Simple Earn flexible product list
     *
     * Weight: 150
     *
     * @summary Get Simple Earn Flexible Product List(USER_DATA)
     * @param {GetSimpleEarnFlexibleProductListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSimpleEarnFlexibleProductListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/account/Get-Simple-Earn-Flexible-Product-List Binance API Documentation}
     */
    public async getSimpleEarnFlexibleProductList(
        requestParameters: GetSimpleEarnFlexibleProductListRequest = {}
    ): Promise<RestApiResponse<GetSimpleEarnFlexibleProductListResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getSimpleEarnFlexibleProductList(
                requestParameters?.asset,
                requestParameters?.current,
                requestParameters?.size,
                requestParameters?.recvWindow
            );
        return sendRequest<GetSimpleEarnFlexibleProductListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Simple Earn Locked Product List
     *
     * Get available Simple Earn locked product list
     *
     * Weight: 150
     *
     * @summary Get Simple Earn Locked Product List(USER_DATA)
     * @param {GetSimpleEarnLockedProductListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSimpleEarnLockedProductListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/account/Get-Simple-Earn-Locked-Product-List Binance API Documentation}
     */
    public async getSimpleEarnLockedProductList(
        requestParameters: GetSimpleEarnLockedProductListRequest = {}
    ): Promise<RestApiResponse<GetSimpleEarnLockedProductListResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getSimpleEarnLockedProductList(
                requestParameters?.asset,
                requestParameters?.current,
                requestParameters?.size,
                requestParameters?.recvWindow
            );
        return sendRequest<GetSimpleEarnLockedProductListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Redeem Flexible Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Redeem Flexible Product(TRADE)
     * @param {RedeemFlexibleProductRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RedeemFlexibleProductResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/earn/Redeem-Flexible-Product Binance API Documentation}
     */
    public async redeemFlexibleProduct(
        requestParameters: RedeemFlexibleProductRequest
    ): Promise<RestApiResponse<RedeemFlexibleProductResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.redeemFlexibleProduct(
            requestParameters?.productId,
            requestParameters?.redeemAll,
            requestParameters?.amount,
            requestParameters?.destAccount,
            requestParameters?.recvWindow
        );
        return sendRequest<RedeemFlexibleProductResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Redeem Locked Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1/3s per account
     *
     * @summary Redeem Locked Product(TRADE)
     * @param {RedeemLockedProductRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RedeemLockedProductResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/earn/Redeem-Locked-Product Binance API Documentation}
     */
    public async redeemLockedProduct(
        requestParameters: RedeemLockedProductRequest
    ): Promise<RestApiResponse<RedeemLockedProductResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.redeemLockedProduct(
            requestParameters?.positionId,
            requestParameters?.recvWindow
        );
        return sendRequest<RedeemLockedProductResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Set Flexible Auto Subscribe
     *
     * Weight: 150
     *
     * @summary Set Flexible Auto Subscribe(USER_DATA)
     * @param {SetFlexibleAutoSubscribeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SetFlexibleAutoSubscribeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/earn/Set-Flexible-Auto-Subscribe Binance API Documentation}
     */
    public async setFlexibleAutoSubscribe(
        requestParameters: SetFlexibleAutoSubscribeRequest
    ): Promise<RestApiResponse<SetFlexibleAutoSubscribeResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.setFlexibleAutoSubscribe(
            requestParameters?.productId,
            requestParameters?.autoSubscribe,
            requestParameters?.recvWindow
        );
        return sendRequest<SetFlexibleAutoSubscribeResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Set locked auto subscribe
     *
     * Weight: 150
     *
     * @summary Set Locked Auto Subscribe(USER_DATA)
     * @param {SetLockedAutoSubscribeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SetLockedAutoSubscribeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/earn/Set-Locked-Auto-Subscribe Binance API Documentation}
     */
    public async setLockedAutoSubscribe(
        requestParameters: SetLockedAutoSubscribeRequest
    ): Promise<RestApiResponse<SetLockedAutoSubscribeResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.setLockedAutoSubscribe(
            requestParameters?.positionId,
            requestParameters?.autoSubscribe,
            requestParameters?.recvWindow
        );
        return sendRequest<SetLockedAutoSubscribeResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Set redeem option for Locked product
     *
     * Weight: 50
     *
     * @summary Set Locked Product Redeem Option(USER_DATA)
     * @param {SetLockedProductRedeemOptionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SetLockedProductRedeemOptionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/earn/Set-Locked-Redeem-Option Binance API Documentation}
     */
    public async setLockedProductRedeemOption(
        requestParameters: SetLockedProductRedeemOptionRequest
    ): Promise<RestApiResponse<SetLockedProductRedeemOptionResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.setLockedProductRedeemOption(
            requestParameters?.positionId,
            requestParameters?.redeemTo,
            requestParameters?.recvWindow
        );
        return sendRequest<SetLockedProductRedeemOptionResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Simple Account query
     *
     * Weight: 150
     *
     * @summary Simple Account(USER_DATA)
     * @param {SimpleAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SimpleAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/account/Simple-Account Binance API Documentation}
     */
    public async simpleAccount(
        requestParameters: SimpleAccountRequest = {}
    ): Promise<RestApiResponse<SimpleAccountResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.simpleAccount(
            requestParameters?.recvWindow
        );
        return sendRequest<SimpleAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Subscribe Flexible Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Subscribe Flexible Product(TRADE)
     * @param {SubscribeFlexibleProductRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SubscribeFlexibleProductResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/earn/Subscribe-Flexible-Product Binance API Documentation}
     */
    public async subscribeFlexibleProduct(
        requestParameters: SubscribeFlexibleProductRequest
    ): Promise<RestApiResponse<SubscribeFlexibleProductResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.subscribeFlexibleProduct(
            requestParameters?.productId,
            requestParameters?.amount,
            requestParameters?.autoSubscribe,
            requestParameters?.sourceAccount,
            requestParameters?.recvWindow
        );
        return sendRequest<SubscribeFlexibleProductResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Subscribe Locked Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Subscribe Locked Product(TRADE)
     * @param {SubscribeLockedProductRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SubscribeLockedProductResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleLockedApi
     * @see {@link https://developers.binance.com/docs/simple_earn/flexible-locked/earn/Subscribe-Locked-Product Binance API Documentation}
     */
    public async subscribeLockedProduct(
        requestParameters: SubscribeLockedProductRequest
    ): Promise<RestApiResponse<SubscribeLockedProductResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.subscribeLockedProduct(
            requestParameters?.projectId,
            requestParameters?.amount,
            requestParameters?.autoSubscribe,
            requestParameters?.sourceAccount,
            requestParameters?.redeemTo,
            requestParameters?.recvWindow
        );
        return sendRequest<SubscribeLockedProductResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
